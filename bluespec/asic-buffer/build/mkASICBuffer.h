/*
 * Generated by Bluespec Compiler (build e76ca21)
 * 
 * On Mon Jul 26 16:15:43 CEST 2021
 * 
 */

/* Generation options: */
#ifndef __mkASICBuffer_h__
#define __mkASICBuffer_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkASICBuffer module */
class MOD_mkASICBuffer : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_axi_beat_count;
  MOD_Reg<tUInt8> INST_axi_burst_length;
  MOD_Reg<tUInt64> INST_ddr_size;
  MOD_Reg<tUInt64> INST_ip_current_write_address;
  MOD_Reg<tUInt32> INST_ip_data;
  MOD_Reg<tUInt32> INST_ip_data_amount;
  MOD_Fifo<tUInt32> INST_ip_data_buffer;
  MOD_Reg<tUInt32> INST_ip_data_counter;
  MOD_Reg<tUInt32> INST_ip_data_get_start;
  MOD_Reg<tUInt32> INST_ip_test_register;
  MOD_Reg<tUInt32> INST_ip_time_setup;
  MOD_Wire<tUInt8> INST_master_read_arreadyIn;
  MOD_BRAM<tUInt8,tUWide,tUInt8> INST_master_read_in_memory;
  MOD_Wire<tUInt8> INST_master_read_in_pwClear;
  MOD_Wire<tUInt8> INST_master_read_in_pwDequeue;
  MOD_Wire<tUInt8> INST_master_read_in_pwEnqueue;
  MOD_Reg<tUWide> INST_master_read_in_rCache;
  MOD_ConfigReg<tUInt8> INST_master_read_in_rRdPtr;
  MOD_ConfigReg<tUInt8> INST_master_read_in_rWrPtr;
  MOD_Wire<tUWide> INST_master_read_in_wDataIn;
  MOD_Wire<tUWide> INST_master_read_in_wDataOut;
  MOD_Reg<tUInt8> INST_master_read_isRst_isInReset;
  MOD_Fifo<tUInt64> INST_master_read_out;
  MOD_BRAM<tUInt8,tUInt64,tUInt8> INST_master_read_out_1_memory;
  MOD_Wire<tUInt8> INST_master_read_out_1_pwClear;
  MOD_Wire<tUInt8> INST_master_read_out_1_pwDequeue;
  MOD_Wire<tUInt8> INST_master_read_out_1_pwEnqueue;
  MOD_Reg<tUInt64> INST_master_read_out_1_rCache;
  MOD_ConfigReg<tUInt8> INST_master_read_out_1_rRdPtr;
  MOD_ConfigReg<tUInt8> INST_master_read_out_1_rWrPtr;
  MOD_Wire<tUInt64> INST_master_read_out_1_wDataIn;
  MOD_Wire<tUInt64> INST_master_read_out_1_wDataOut;
  MOD_Wire<tUInt64> INST_master_read_rinpkg;
  MOD_Wire<tUInt8> INST_master_read_rvalidIn;
  MOD_Wire<tUInt64> INST_master_read_waraddr;
  MOD_Wire<tUInt8> INST_master_read_warburst;
  MOD_Wire<tUInt8> INST_master_read_warcache;
  MOD_Wire<tUInt32> INST_master_read_warid;
  MOD_Wire<tUInt8> INST_master_read_warlen;
  MOD_Wire<tUInt8> INST_master_read_warlock;
  MOD_Wire<tUInt8> INST_master_read_warprot;
  MOD_Wire<tUInt8> INST_master_read_warqos;
  MOD_Wire<tUInt8> INST_master_read_warregion;
  MOD_Wire<tUInt8> INST_master_read_warsize;
  MOD_Wire<tUInt8> INST_master_read_waruser;
  MOD_BRAM<tUInt8,tUWide,tUInt8> INST_master_write_in_addr_memory;
  MOD_Wire<tUInt8> INST_master_write_in_addr_pwClear;
  MOD_Wire<tUInt8> INST_master_write_in_addr_pwDequeue;
  MOD_Wire<tUInt8> INST_master_write_in_addr_pwEnqueue;
  MOD_Reg<tUWide> INST_master_write_in_addr_rCache;
  MOD_ConfigReg<tUInt8> INST_master_write_in_addr_rRdPtr;
  MOD_ConfigReg<tUInt8> INST_master_write_in_addr_rWrPtr;
  MOD_Wire<tUWide> INST_master_write_in_addr_wDataIn;
  MOD_Wire<tUWide> INST_master_write_in_addr_wDataOut;
  MOD_BRAM<tUInt8,tUInt64,tUInt8> INST_master_write_in_data_memory;
  MOD_Wire<tUInt8> INST_master_write_in_data_pwClear;
  MOD_Wire<tUInt8> INST_master_write_in_data_pwDequeue;
  MOD_Wire<tUInt8> INST_master_write_in_data_pwEnqueue;
  MOD_Reg<tUInt64> INST_master_write_in_data_rCache;
  MOD_ConfigReg<tUInt8> INST_master_write_in_data_rRdPtr;
  MOD_ConfigReg<tUInt8> INST_master_write_in_data_rWrPtr;
  MOD_Wire<tUInt64> INST_master_write_in_data_wDataIn;
  MOD_Wire<tUInt64> INST_master_write_in_data_wDataOut;
  MOD_Reg<tUInt8> INST_master_write_isRst_isInReset;
  MOD_BRAM<tUInt8,tUInt32,tUInt8> INST_master_write_out_memory;
  MOD_Wire<tUInt8> INST_master_write_out_pwClear;
  MOD_Wire<tUInt8> INST_master_write_out_pwDequeue;
  MOD_Wire<tUInt8> INST_master_write_out_pwEnqueue;
  MOD_Reg<tUInt32> INST_master_write_out_rCache;
  MOD_ConfigReg<tUInt8> INST_master_write_out_rRdPtr;
  MOD_ConfigReg<tUInt8> INST_master_write_out_rWrPtr;
  MOD_Wire<tUInt32> INST_master_write_out_wDataIn;
  MOD_Wire<tUInt32> INST_master_write_out_wDataOut;
  MOD_Wire<tUInt32> INST_master_write_rinpkg;
  MOD_Wire<tUInt64> INST_master_write_wawaddr;
  MOD_Wire<tUInt8> INST_master_write_wawburst;
  MOD_Wire<tUInt8> INST_master_write_wawcache;
  MOD_Wire<tUInt32> INST_master_write_wawid;
  MOD_Wire<tUInt8> INST_master_write_wawlen;
  MOD_Wire<tUInt8> INST_master_write_wawlock;
  MOD_Wire<tUInt8> INST_master_write_wawprot;
  MOD_Wire<tUInt8> INST_master_write_wawqos;
  MOD_Wire<tUInt8> INST_master_write_wawready;
  MOD_Wire<tUInt8> INST_master_write_wawregion;
  MOD_Wire<tUInt8> INST_master_write_wawsize;
  MOD_Wire<tUInt8> INST_master_write_wawuser;
  MOD_Wire<tUInt8> INST_master_write_wpbvalid;
  MOD_Wire<tUInt32> INST_master_write_wwdata;
  MOD_Wire<tUInt8> INST_master_write_wwlast;
  MOD_Wire<tUInt8> INST_master_write_wwready;
  MOD_Wire<tUInt8> INST_master_write_wwstrb;
  MOD_Wire<tUInt8> INST_master_write_wwuser;
  MOD_Reg<tUInt32> INST_pci_start;
  MOD_Wire<tUInt8> INST_slave_read_araddrIn;
  MOD_Wire<tUInt8> INST_slave_read_arprotIn;
  MOD_Wire<tUInt8> INST_slave_read_arvalidIn;
  MOD_Fifo<tUInt32> INST_slave_read_in;
  MOD_Reg<tUInt8> INST_slave_read_isRst_isInReset;
  MOD_Fifo<tUInt64> INST_slave_read_out;
  MOD_Wire<tUInt32> INST_slave_read_rdataOut;
  MOD_Wire<tUInt8> INST_slave_read_rreadyIn;
  MOD_Wire<tUInt8> INST_slave_read_rrespOut;
  MOD_CReg<tUInt32> INST_slave_write_addrIn_rv;
  MOD_Wire<tUInt8> INST_slave_write_awaddrIn;
  MOD_Wire<tUInt8> INST_slave_write_awprotIn;
  MOD_Wire<tUInt8> INST_slave_write_awvalidIn;
  MOD_Wire<tUInt8> INST_slave_write_breadyIn;
  MOD_Wire<tUInt8> INST_slave_write_brespOut;
  MOD_CReg<tUInt64> INST_slave_write_dataIn_rv;
  MOD_Fifo<tUInt64> INST_slave_write_in;
  MOD_Reg<tUInt8> INST_slave_write_isRst_isInReset;
  MOD_Fifo<tUInt8> INST_slave_write_out;
  MOD_Wire<tUInt32> INST_slave_write_wdataIn;
  MOD_Wire<tUInt8> INST_slave_write_wstrbIn;
  MOD_Wire<tUInt8> INST_slave_write_wvalidIn;
  MOD_Reg<tUInt8> INST_wnext;
 
 /* Constructor */
 public:
  MOD_mkASICBuffer(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_aresetn;
 
 /* Port definitions */
 public:
  tUInt8 PORT_S00_AXI_arready;
  tUInt8 PORT_S00_AXI_rvalid;
  tUInt32 PORT_S00_AXI_rdata;
  tUInt8 PORT_S00_AXI_rresp;
  tUInt8 PORT_S00_AXI_awready;
  tUInt8 PORT_S00_AXI_wready;
  tUInt8 PORT_S00_AXI_bvalid;
  tUInt8 PORT_S00_AXI_bresp;
  tUInt8 PORT_M00_AXI_arvalid;
  tUInt32 PORT_M00_AXI_arid;
  tUInt64 PORT_M00_AXI_araddr;
  tUInt8 PORT_M00_AXI_arlen;
  tUInt8 PORT_M00_AXI_arsize;
  tUInt8 PORT_M00_AXI_arburst;
  tUInt8 PORT_M00_AXI_arlock;
  tUInt8 PORT_M00_AXI_arcache;
  tUInt8 PORT_M00_AXI_arprot;
  tUInt8 PORT_M00_AXI_arqos;
  tUInt8 PORT_M00_AXI_arregion;
  tUInt8 PORT_M00_AXI_aruser;
  tUInt8 PORT_M00_AXI_rready;
  tUInt8 PORT_M00_AXI_awvalid;
  tUInt32 PORT_M00_AXI_awid;
  tUInt64 PORT_M00_AXI_awaddr;
  tUInt8 PORT_M00_AXI_awlen;
  tUInt8 PORT_M00_AXI_awsize;
  tUInt8 PORT_M00_AXI_awburst;
  tUInt8 PORT_M00_AXI_awlock;
  tUInt8 PORT_M00_AXI_awcache;
  tUInt8 PORT_M00_AXI_awprot;
  tUInt8 PORT_M00_AXI_awqos;
  tUInt8 PORT_M00_AXI_awregion;
  tUInt8 PORT_M00_AXI_awuser;
  tUInt8 PORT_M00_AXI_wvalid;
  tUInt32 PORT_M00_AXI_wdata;
  tUInt8 PORT_M00_AXI_wstrb;
  tUInt8 PORT_M00_AXI_wlast;
  tUInt8 PORT_M00_AXI_wuser;
  tUInt8 PORT_M00_AXI_bready;
  tUInt8 PORT_RDY_S00_AXI_arready;
  tUInt8 PORT_RDY_S00_AXI_parvalid;
  tUInt8 PORT_RDY_S00_AXI_paraddr;
  tUInt8 PORT_RDY_S00_AXI_parprot;
  tUInt8 PORT_RDY_S00_AXI_rvalid;
  tUInt8 PORT_RDY_S00_AXI_prready;
  tUInt8 PORT_RDY_S00_AXI_rdata;
  tUInt8 PORT_RDY_S00_AXI_rresp;
  tUInt8 PORT_RDY_S00_AXI_awready;
  tUInt8 PORT_RDY_S00_AXI_pawvalid;
  tUInt8 PORT_RDY_S00_AXI_pawaddr;
  tUInt8 PORT_RDY_S00_AXI_pawprot;
  tUInt8 PORT_RDY_S00_AXI_wready;
  tUInt8 PORT_RDY_S00_AXI_pwvalid;
  tUInt8 PORT_RDY_S00_AXI_pwdata;
  tUInt8 PORT_RDY_S00_AXI_pwstrb;
  tUInt8 PORT_RDY_S00_AXI_bvalid;
  tUInt8 PORT_RDY_S00_AXI_pbready;
  tUInt8 PORT_RDY_S00_AXI_bresp;
  tUInt8 PORT_RDY_M00_AXI_arvalid;
  tUInt8 PORT_RDY_M00_AXI_parready;
  tUInt8 PORT_RDY_M00_AXI_arid;
  tUInt8 PORT_RDY_M00_AXI_araddr;
  tUInt8 PORT_RDY_M00_AXI_arlen;
  tUInt8 PORT_RDY_M00_AXI_arsize;
  tUInt8 PORT_RDY_M00_AXI_arburst;
  tUInt8 PORT_RDY_M00_AXI_arlock;
  tUInt8 PORT_RDY_M00_AXI_arcache;
  tUInt8 PORT_RDY_M00_AXI_arprot;
  tUInt8 PORT_RDY_M00_AXI_arqos;
  tUInt8 PORT_RDY_M00_AXI_arregion;
  tUInt8 PORT_RDY_M00_AXI_aruser;
  tUInt8 PORT_RDY_M00_AXI_rready;
  tUInt8 PORT_RDY_M00_AXI_prvalid;
  tUInt8 PORT_RDY_M00_AXI_prchannel;
  tUInt8 PORT_RDY_M00_AXI_pawready;
  tUInt8 PORT_RDY_M00_AXI_awvalid;
  tUInt8 PORT_RDY_M00_AXI_awid;
  tUInt8 PORT_RDY_M00_AXI_awaddr;
  tUInt8 PORT_RDY_M00_AXI_awlen;
  tUInt8 PORT_RDY_M00_AXI_awsize;
  tUInt8 PORT_RDY_M00_AXI_awburst;
  tUInt8 PORT_RDY_M00_AXI_awlock;
  tUInt8 PORT_RDY_M00_AXI_awcache;
  tUInt8 PORT_RDY_M00_AXI_awprot;
  tUInt8 PORT_RDY_M00_AXI_awqos;
  tUInt8 PORT_RDY_M00_AXI_awregion;
  tUInt8 PORT_RDY_M00_AXI_awuser;
  tUInt8 PORT_RDY_M00_AXI_pwready;
  tUInt8 PORT_RDY_M00_AXI_wvalid;
  tUInt8 PORT_RDY_M00_AXI_wdata;
  tUInt8 PORT_RDY_M00_AXI_wstrb;
  tUInt8 PORT_RDY_M00_AXI_wlast;
  tUInt8 PORT_RDY_M00_AXI_wuser;
  tUInt8 PORT_RDY_M00_AXI_pbvalid;
  tUInt8 PORT_RDY_M00_AXI_bready;
  tUInt8 PORT_RDY_M00_AXI_bin;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_master_write_isRst_isInReset__h6912;
  tUInt8 DEF_master_read_isRst_isInReset__h2634;
  tUInt8 DEF_slave_write_isRst_isInReset__h878;
  tUInt8 DEF_slave_read_isRst_isInReset__h89;
  tUInt64 DEF_slave_write_dataIn_rv_port1__read____d24;
  tUInt32 DEF_x__h13670;
  tUInt32 DEF_slave_write_addrIn_rv_port1__read____d22;
  tUInt8 DEF_x__h10348;
  tUInt8 DEF_x__h10250;
  tUInt8 DEF_x__h9358;
  tUInt8 DEF_x__h9258;
  tUInt8 DEF_x__h8068;
  tUInt8 DEF_x__h7906;
  tUInt8 DEF_x__h5194;
  tUInt8 DEF_x__h5082;
  tUInt8 DEF_x__h3790;
  tUInt8 DEF_x__h3628;
  tUInt8 DEF_slave_write_out_notEmpty____d57;
  tUInt8 DEF_slave_read_out_notEmpty____d15;
  tUInt8 DEF_slave_read_in_notFull____d6;
  tUInt8 DEF_NOT_master_write_out_rRdPtr_read__92_PLUS_16_5_ETC___d452;
  tUInt8 DEF_NOT_master_write_in_data_rRdPtr_read__62_EQ_ma_ETC___d440;
  tUInt8 DEF_NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407;
  tUInt8 DEF_NOT_master_write_isRst_isInReset_40___d408;
  tUInt8 DEF_NOT_master_read_out_1_rRdPtr_read__86_PLUS_16__ETC___d235;
  tUInt8 DEF_NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201;
  tUInt8 DEF_NOT_master_read_isRst_isInReset_1___d202;
  tUInt8 DEF_NOT_slave_write_dataIn_rv_port0__read__5_BIT_36_6___d47;
  tUInt8 DEF_NOT_slave_write_addrIn_rv_port0__read__5_BIT_9_6___d37;
  tUInt8 DEF_NOT_slave_write_isRst_isInReset_1___d38;
  tUInt8 DEF_NOT_slave_read_isRst_isInReset___d3;
 
 /* Local definitions */
 private:
  tUWide DEF_master_write_in_addr_rCache___d297;
  tUWide DEF_master_read_in_rCache___d118;
  tUWide DEF_master_write_in_addr_wDataOut_wget____d414;
  tUWide DEF_master_write_in_addr_wDataIn_wget____d250;
  tUWide DEF_master_write_in_addr_memory_b_read____d320;
  tUWide DEF_master_read_in_wDataOut_wget____d208;
  tUWide DEF_master_read_in_wDataIn_wget____d71;
  tUWide DEF_master_read_in_memory_b_read____d141;
  tUInt64 DEF_x__h13060;
  tUInt32 DEF__read__h12737;
  tUInt32 DEF_y__h13528;
  tUInt32 DEF_x_data__h12994;
  tUInt8 DEF_value__h13832;
  tUInt8 DEF_master_write_out_pwClear_whas____d376;
  tUInt8 DEF_master_write_in_data_pwClear_whas____d340;
  tUInt8 DEF_master_write_in_addr_pwClear_whas____d241;
  tUInt8 DEF_master_read_out_1_pwClear_whas____d161;
  tUInt8 DEF_master_read_in_pwClear_whas____d62;
  tUWide DEF_master_write_in_addr_rCache_97_BITS_108_TO_15___d302;
  tUWide DEF_master_read_in_rCache_18_BITS_108_TO_15___d123;
  tUWide DEF_master_write_in_addr_memory_b_read__20_BITS_10_ETC___d321;
  tUWide DEF_master_read_in_memory_b_read__41_BITS_108_TO_15___d142;
  tUWide DEF_IF_master_write_in_addr_rCache_97_BIT_115_98_A_ETC___d339;
  tUWide DEF_master_write_in_addr_rCache_97_BITS_108_TO_15__ETC___d319;
  tUWide DEF_master_write_in_addr_memory_b_read__20_BITS_10_ETC___d338;
  tUWide DEF_IF_master_write_in_addr_pwEnqueue_whas__42_THE_ETC___d286;
  tUWide DEF_IF_master_write_in_addr_wDataIn_whas__49_THEN__ETC___d285;
  tUWide DEF_IF_master_read_in_rCache_18_BIT_115_19_AND_mas_ETC___d160;
  tUWide DEF_master_read_in_rCache_18_BITS_108_TO_15_23_CON_ETC___d140;
  tUWide DEF_master_read_in_memory_b_read__41_BITS_108_TO_1_ETC___d159;
  tUWide DEF_IF_master_read_in_pwEnqueue_whas__3_THEN_IF_ma_ETC___d107;
  tUWide DEF_IF_master_read_in_wDataIn_whas__0_THEN_master__ETC___d106;
  tUInt8 DEF_NOT_master_write_out_pwClear_whas__76___d382;
  tUInt8 DEF_NOT_master_write_in_data_pwClear_whas__40___d346;
  tUInt8 DEF_NOT_master_write_in_addr_pwClear_whas__41___d247;
  tUInt8 DEF_NOT_master_read_out_1_pwClear_whas__61___d167;
  tUInt8 DEF_NOT_master_read_in_pwClear_whas__2___d68;
  tUWide DEF__1_CONCAT_master_write_in_addr_rWrPtr_read__44__ETC___d288;
  tUWide DEF__1_CONCAT_master_read_in_rWrPtr_read__5_CONCAT__ETC___d109;
  tUWide DEF__0_CONCAT_ip_current_write_address_18_CONCAT_ax_ETC___d522;
 
 /* Rules */
 public:
  void RL_slave_read_isRst_isResetAssertedUpdate();
  void RL_slave_read_addrInWrite();
  void RL_slave_read_deqOut();
  void RL_slave_read_putOutData();
  void RL_slave_write_isRst_isResetAssertedUpdate();
  void RL_slave_write_mergeAddrData();
  void RL_slave_write_addrInWrite();
  void RL_slave_write_dataInWrite();
  void RL_slave_write_outWrite();
  void RL_slave_write_outForward();
  void RL_master_read_isRst_isResetAssertedUpdate();
  void RL_master_read_in_portA();
  void RL_master_read_in_portB();
  void RL_master_read_in_portB_read_data();
  void RL_master_read_out_1_portA();
  void RL_master_read_out_1_portB();
  void RL_master_read_out_1_portB_read_data();
  void RL_master_read_deqIn();
  void RL_master_read_forwardIn();
  void RL_master_read_enqOut();
  void RL_master_write_isRst_isResetAssertedUpdate();
  void RL_master_write_in_addr_portA();
  void RL_master_write_in_addr_portB();
  void RL_master_write_in_addr_portB_read_data();
  void RL_master_write_in_data_portA();
  void RL_master_write_in_data_portB();
  void RL_master_write_in_data_portB_read_data();
  void RL_master_write_out_portA();
  void RL_master_write_out_portB();
  void RL_master_write_out_portB_read_data();
  void RL_master_write_deqInAddr();
  void RL_master_write_forwardInAddr();
  void RL_master_write_deqInData();
  void RL_master_write_forwardInData();
  void RL_master_write_enqOut();
  void RL_handleReadRequest();
  void RL_handleWriteRequest();
  void RL_dataGenerate();
  void RL_writeRequest();
  void RL_writeData();
  void RL_requestResponse();
 
 /* Methods */
 public:
  tUInt8 METH_slave_read_fab_arready();
  tUInt8 METH_RDY_slave_read_fab_arready();
  void METH_slave_read_fab_parvalid(tUInt8 ARG_S00_AXI_arvalid);
  tUInt8 METH_RDY_slave_read_fab_parvalid();
  void METH_slave_read_fab_paraddr(tUInt8 ARG_S00_AXI_araddr);
  tUInt8 METH_RDY_slave_read_fab_paraddr();
  void METH_slave_read_fab_parprot(tUInt8 ARG_S00_AXI_arprot);
  tUInt8 METH_RDY_slave_read_fab_parprot();
  tUInt8 METH_slave_read_fab_rvalid();
  tUInt8 METH_RDY_slave_read_fab_rvalid();
  void METH_slave_read_fab_prready(tUInt8 ARG_S00_AXI_rready);
  tUInt8 METH_RDY_slave_read_fab_prready();
  tUInt32 METH_slave_read_fab_rdata();
  tUInt8 METH_RDY_slave_read_fab_rdata();
  tUInt8 METH_slave_read_fab_rresp();
  tUInt8 METH_RDY_slave_read_fab_rresp();
  tUInt8 METH_slave_write_fab_awready();
  tUInt8 METH_RDY_slave_write_fab_awready();
  void METH_slave_write_fab_pawvalid(tUInt8 ARG_S00_AXI_awvalid);
  tUInt8 METH_RDY_slave_write_fab_pawvalid();
  void METH_slave_write_fab_pawaddr(tUInt8 ARG_S00_AXI_awaddr);
  tUInt8 METH_RDY_slave_write_fab_pawaddr();
  void METH_slave_write_fab_pawprot(tUInt8 ARG_S00_AXI_awprot);
  tUInt8 METH_RDY_slave_write_fab_pawprot();
  tUInt8 METH_slave_write_fab_wready();
  tUInt8 METH_RDY_slave_write_fab_wready();
  void METH_slave_write_fab_pwvalid(tUInt8 ARG_S00_AXI_wvalid);
  tUInt8 METH_RDY_slave_write_fab_pwvalid();
  void METH_slave_write_fab_pwdata(tUInt32 ARG_S00_AXI_wdata);
  tUInt8 METH_RDY_slave_write_fab_pwdata();
  void METH_slave_write_fab_pwstrb(tUInt8 ARG_S00_AXI_wstrb);
  tUInt8 METH_RDY_slave_write_fab_pwstrb();
  tUInt8 METH_slave_write_fab_bvalid();
  tUInt8 METH_RDY_slave_write_fab_bvalid();
  void METH_slave_write_fab_pbready(tUInt8 ARG_S00_AXI_bready);
  tUInt8 METH_RDY_slave_write_fab_pbready();
  tUInt8 METH_slave_write_fab_bresp();
  tUInt8 METH_RDY_slave_write_fab_bresp();
  tUInt8 METH_master_read_fab_arvalid();
  tUInt8 METH_RDY_master_read_fab_arvalid();
  void METH_master_read_fab_parready(tUInt8 ARG_M00_AXI_arready);
  tUInt8 METH_RDY_master_read_fab_parready();
  tUInt32 METH_master_read_fab_arid();
  tUInt8 METH_RDY_master_read_fab_arid();
  tUInt64 METH_master_read_fab_araddr();
  tUInt8 METH_RDY_master_read_fab_araddr();
  tUInt8 METH_master_read_fab_arlen();
  tUInt8 METH_RDY_master_read_fab_arlen();
  tUInt8 METH_master_read_fab_arsize();
  tUInt8 METH_RDY_master_read_fab_arsize();
  tUInt8 METH_master_read_fab_arburst();
  tUInt8 METH_RDY_master_read_fab_arburst();
  tUInt8 METH_master_read_fab_arlock();
  tUInt8 METH_RDY_master_read_fab_arlock();
  tUInt8 METH_master_read_fab_arcache();
  tUInt8 METH_RDY_master_read_fab_arcache();
  tUInt8 METH_master_read_fab_arprot();
  tUInt8 METH_RDY_master_read_fab_arprot();
  tUInt8 METH_master_read_fab_arqos();
  tUInt8 METH_RDY_master_read_fab_arqos();
  tUInt8 METH_master_read_fab_arregion();
  tUInt8 METH_RDY_master_read_fab_arregion();
  tUInt8 METH_master_read_fab_aruser();
  tUInt8 METH_RDY_master_read_fab_aruser();
  tUInt8 METH_master_read_fab_rready();
  tUInt8 METH_RDY_master_read_fab_rready();
  void METH_master_read_fab_prvalid(tUInt8 ARG_M00_AXI_rvalid);
  tUInt8 METH_RDY_master_read_fab_prvalid();
  void METH_master_read_fab_prchannel(tUInt32 ARG_M00_AXI_rid,
				      tUInt32 ARG_M00_AXI_rdata,
				      tUInt8 ARG_M00_AXI_rresp,
				      tUInt8 ARG_M00_AXI_rlast,
				      tUInt8 ARG_M00_AXI_ruser);
  tUInt8 METH_RDY_master_read_fab_prchannel();
  void METH_master_write_fab_pawready(tUInt8 ARG_M00_AXI_awready);
  tUInt8 METH_RDY_master_write_fab_pawready();
  tUInt8 METH_master_write_fab_awvalid();
  tUInt8 METH_RDY_master_write_fab_awvalid();
  tUInt32 METH_master_write_fab_awid();
  tUInt8 METH_RDY_master_write_fab_awid();
  tUInt64 METH_master_write_fab_awaddr();
  tUInt8 METH_RDY_master_write_fab_awaddr();
  tUInt8 METH_master_write_fab_awlen();
  tUInt8 METH_RDY_master_write_fab_awlen();
  tUInt8 METH_master_write_fab_awsize();
  tUInt8 METH_RDY_master_write_fab_awsize();
  tUInt8 METH_master_write_fab_awburst();
  tUInt8 METH_RDY_master_write_fab_awburst();
  tUInt8 METH_master_write_fab_awlock();
  tUInt8 METH_RDY_master_write_fab_awlock();
  tUInt8 METH_master_write_fab_awcache();
  tUInt8 METH_RDY_master_write_fab_awcache();
  tUInt8 METH_master_write_fab_awprot();
  tUInt8 METH_RDY_master_write_fab_awprot();
  tUInt8 METH_master_write_fab_awqos();
  tUInt8 METH_RDY_master_write_fab_awqos();
  tUInt8 METH_master_write_fab_awregion();
  tUInt8 METH_RDY_master_write_fab_awregion();
  tUInt8 METH_master_write_fab_awuser();
  tUInt8 METH_RDY_master_write_fab_awuser();
  void METH_master_write_fab_pwready(tUInt8 ARG_M00_AXI_wready);
  tUInt8 METH_RDY_master_write_fab_pwready();
  tUInt8 METH_master_write_fab_wvalid();
  tUInt8 METH_RDY_master_write_fab_wvalid();
  tUInt32 METH_master_write_fab_wdata();
  tUInt8 METH_RDY_master_write_fab_wdata();
  tUInt8 METH_master_write_fab_wstrb();
  tUInt8 METH_RDY_master_write_fab_wstrb();
  tUInt8 METH_master_write_fab_wlast();
  tUInt8 METH_RDY_master_write_fab_wlast();
  tUInt8 METH_master_write_fab_wuser();
  tUInt8 METH_RDY_master_write_fab_wuser();
  void METH_master_write_fab_pbvalid(tUInt8 ARG_M00_AXI_bvalid);
  tUInt8 METH_RDY_master_write_fab_pbvalid();
  tUInt8 METH_master_write_fab_bready();
  tUInt8 METH_RDY_master_write_fab_bready();
  void METH_master_write_fab_bin(tUInt8 ARG_M00_AXI_bresp,
				 tUInt32 ARG_M00_AXI_bid,
				 tUInt8 ARG_M00_AXI_buser);
  tUInt8 METH_RDY_master_write_fab_bin();
 
 /* Reset routines */
 public:
  void reset_aresetn(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkASICBuffer &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkASICBuffer &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkASICBuffer &backing);
};

#endif /* ifndef __mkASICBuffer_h__ */
