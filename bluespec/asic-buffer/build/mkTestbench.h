/*
 * Generated by Bluespec Compiler (build e76ca21)
 * 
 * On Mon Jul 26 16:15:43 CEST 2021
 * 
 */

/* Generation options: */
#ifndef __mkTestbench_h__
#define __mkTestbench_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkASICBuffer.h"


/* Class declaration for the mkTestbench module */
class MOD_mkTestbench : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt64> INST_addr_counter_write;
  MOD_mkASICBuffer INST_asic_buffer;
  MOD_Reg<tUInt32> INST_cur_id_write;
  MOD_Reg<tUInt8> INST_data_count;
  MOD_ConfigReg<tUInt32> INST_jj_1_delay_count;
  MOD_ConfigReg<tUInt32> INST_jj_2_delay_count;
  MOD_ConfigReg<tUInt32> INST_jj_delay_count;
  MOD_Wire<tUInt8> INST_m_rd_araddrOut;
  MOD_Wire<tUInt8> INST_m_rd_arprotOut;
  MOD_Wire<tUInt8> INST_m_rd_arreadyIn;
  MOD_CReg<tUInt32> INST_m_rd_in_rv;
  MOD_Reg<tUInt8> INST_m_rd_isRst_isInReset;
  MOD_CReg<tUInt64> INST_m_rd_out_rv;
  MOD_Wire<tUInt32> INST_m_rd_rdataIn;
  MOD_Wire<tUInt8> INST_m_rd_rrespIn;
  MOD_Wire<tUInt8> INST_m_rd_rvalidIn;
  MOD_CReg<tUInt32> INST_m_wr_addrOut_rv;
  MOD_Wire<tUInt8> INST_m_wr_awaddrOut;
  MOD_Wire<tUInt8> INST_m_wr_awprotOut;
  MOD_Wire<tUInt8> INST_m_wr_awreadyIn;
  MOD_Wire<tUInt8> INST_m_wr_brespIn;
  MOD_Wire<tUInt8> INST_m_wr_bvalidIn;
  MOD_CReg<tUInt64> INST_m_wr_dataOut_rv;
  MOD_CReg<tUInt64> INST_m_wr_in_rv;
  MOD_Reg<tUInt8> INST_m_wr_isRst_isInReset;
  MOD_CReg<tUInt8> INST_m_wr_out_rv;
  MOD_Wire<tUInt32> INST_m_wr_wdataOut;
  MOD_Wire<tUInt8> INST_m_wr_wreadyIn;
  MOD_Wire<tUInt8> INST_m_wr_wstrbOut;
  MOD_Reg<tUInt8> INST_running;
  MOD_Wire<tUWide> INST_s_rd_arinpkg;
  MOD_Wire<tUInt8> INST_s_rd_arvalidIn;
  MOD_Fifo<tUWide> INST_s_rd_in;
  MOD_Reg<tUInt8> INST_s_rd_isRst_isInReset;
  MOD_Fifo<tUInt64> INST_s_rd_out;
  MOD_Wire<tUInt8> INST_s_rd_prreadyIn;
  MOD_Wire<tUInt32> INST_s_rd_wrdata;
  MOD_Wire<tUInt32> INST_s_rd_wrid;
  MOD_Wire<tUInt8> INST_s_rd_wrlast;
  MOD_Wire<tUInt8> INST_s_rd_wrresp;
  MOD_Wire<tUInt8> INST_s_rd_wruser;
  MOD_Wire<tUWide> INST_s_wr_arinpkg_addr;
  MOD_Wire<tUInt64> INST_s_wr_arinpkg_data;
  MOD_Fifo<tUWide> INST_s_wr_in_addr;
  MOD_Fifo<tUInt64> INST_s_wr_in_data;
  MOD_Reg<tUInt8> INST_s_wr_isRst_isInReset;
  MOD_Fifo<tUInt32> INST_s_wr_out;
  MOD_Wire<tUInt8> INST_s_wr_pbreadyIn;
  MOD_Wire<tUInt8> INST_s_wr_wawvalid;
  MOD_Wire<tUInt32> INST_s_wr_wbid;
  MOD_Wire<tUInt8> INST_s_wr_wbresp;
  MOD_Wire<tUInt8> INST_s_wr_wbuser;
  MOD_Wire<tUInt8> INST_s_wr_wwvalid;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
  MOD_Reg<tUInt32> INST_transfers_left_write;
 
 /* Constructor */
 public:
  MOD_mkTestbench(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_action_np_2;
  tUInt8 DEF_WILL_FIRE_RL_action_d_init_np_2;
  tUInt8 DEF_WILL_FIRE_RL_action_l156c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l150c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l147c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l141c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l138c9;
  tUInt8 DEF_WILL_FIRE_RL_action_np_1;
  tUInt8 DEF_WILL_FIRE_RL_action_d_init_np_1;
  tUInt8 DEF_WILL_FIRE_RL_action_l133c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l130c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l126c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l123c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l119c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l116c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l112c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l109c9;
  tUInt8 DEF_WILL_FIRE_RL_action_np;
  tUInt8 DEF_WILL_FIRE_RL_action_d_init_np;
  tUInt8 DEF_WILL_FIRE_RL_action_l104c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l98c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l95c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l91c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l85c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l82c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l78c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l72c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l69c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l65c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l59c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l56c9;
  tUInt8 DEF_WILL_FIRE_RL_action_l55c9;
  tUInt8 DEF_s_wr_isRst_isInReset__h4641;
  tUInt8 DEF_s_rd_isRst_isInReset__h3489;
  tUInt8 DEF_m_wr_dataOut_rv_port1__read__5_BIT_36___d46;
  tUInt8 DEF_m_wr_addrOut_rv_port1__read__7_BIT_9___d38;
  tUInt8 DEF_m_wr_isRst_isInReset__h1254;
  tUInt8 DEF_m_rd_in_rv_port1__read_BIT_9___d3;
  tUInt8 DEF_m_rd_isRst_isInReset__h79;
  tUInt64 DEF_m_wr_in_rv_port1__read____d21;
  tUInt64 DEF_m_wr_dataOut_rv_port1__read____d45;
  tUInt64 DEF_m_rd_out_rv_port1__read____d356;
  tUInt32 DEF_jj_2_delay_count_read____d324;
  tUInt32 DEF_jj_1_delay_count_read____d426;
  tUInt32 DEF_jj_delay_count_read____d392;
  tUInt32 DEF_m_wr_addrOut_rv_port1__read____d37;
  tUInt32 DEF_m_rd_in_rv_port1__read____d2;
  tUInt32 DEF_b__h7596;
  tUInt8 DEF_m_wr_out_rv_port1__read____d342;
  tUInt8 DEF_s_wr_out_notEmpty____d136;
  tUInt8 DEF_s_wr_in_data_notFull____d129;
  tUInt8 DEF_s_wr_in_addr_notFull____d104;
  tUInt8 DEF_s_rd_out_notEmpty____d91;
  tUInt8 DEF_s_rd_in_notFull____d66;
  tUInt8 DEF_m_wr_out_rv_port1__read__42_BITS_1_TO_0_44_EQ_0___d345;
  tUInt8 DEF_NOT_s_wr_isRst_isInReset_9___d101;
  tUInt8 DEF_NOT_s_rd_isRst_isInReset_1___d63;
  tUInt8 DEF_NOT_m_wr_out_rv_port0__read__3_BIT_2_4___d55;
  tUInt8 DEF_NOT_m_wr_isRst_isInReset_0___d39;
  tUInt8 DEF_NOT_m_rd_out_rv_port0__read__1_BIT_34_2___d13;
  tUInt8 DEF_NOT_m_rd_isRst_isInReset___d4;
 
 /* Local definitions */
 private:
  tUWide DEF_s_wr_arinpkg_addr_wget____d107;
  tUWide DEF_s_wr_in_addr_first____d271;
  tUWide DEF_s_rd_arinpkg_wget____d69;
  tUWide DEF_s_wr_arinpkg_addr_wget__07_BITS_108_TO_15___d108;
  tUWide DEF_s_rd_arinpkg_wget__9_BITS_108_TO_15___d70;
  tUInt32 DEF_v__h73242;
  tUWide DEF_s_rd_arinpkg_wget__9_BITS_108_TO_15_0_CONCAT_I_ETC___d87;
  tUWide DEF_s_wr_arinpkg_addr_wget__07_BITS_108_TO_15_08_C_ETC___d125;
  tUWide DEF_asic_buffer_master_read_fab_arid__75_CONCAT_as_ETC___d203;
  tUWide DEF_asic_buffer_master_write_fab_awid__22_CONCAT_a_ETC___d250;
  tUInt64 DEF__0_CONCAT_DONTCARE___d361;
  tUInt32 DEF__0_CONCAT_DONTCARE___d8;
  tUInt8 DEF__0_CONCAT_DONTCARE___d355;
 
 /* Rules */
 public:
  void RL_m_rd_isRst_isResetAssertedUpdate();
  void RL_m_rd_deqIn();
  void RL_m_rd_forwardIn();
  void RL_m_rd_enqOut();
  void RL_m_wr_isRst_isResetAssertedUpdate();
  void RL_m_wr_splitAddrData();
  void RL_m_wr_deqAddr();
  void RL_m_wr_forwardAddr();
  void RL_m_wr_deqData();
  void RL_m_wr_forwardData();
  void RL_m_wr_forwardResp();
  void RL_s_rd_isRst_isResetAssertedUpdate();
  void RL_s_rd_enqIn();
  void RL_s_rd_deqOut();
  void RL_s_rd_forwardOut();
  void RL_s_wr_isRst_isResetAssertedUpdate();
  void RL_s_wr_enqAddr();
  void RL_s_wr_enqData();
  void RL_s_wr_deqOut();
  void RL_s_wr_forwardOut();
  void RL_forward1();
  void RL_forward2();
  void RL_forward3();
  void RL_forward4();
  void RL_forward5();
  void RL_forward6();
  void RL_forward7();
  void RL_forward8();
  void RL_forward1_1();
  void RL_forward2_1();
  void RL_forward3_1();
  void RL_forward4_1();
  void RL_forward5_1();
  void RL_forward6_1();
  void RL_forward7_1();
  void RL_forward8_1();
  void RL_forward9();
  void RL_forward10();
  void RL_forward11();
  void RL_forward1_2();
  void RL_forward2_2();
  void RL_forward3_2();
  void RL_forward4_2();
  void RL_forward5_2();
  void RL_forward6_2();
  void RL_forward1_3();
  void RL_forward2_3();
  void RL_forward3_3();
  void RL_forward4_3();
  void RL_forward5_3();
  void RL_forward6_3();
  void RL_forward7_2();
  void RL_forward8_2();
  void RL_forward9_1();
  void RL_handleWriteRequest();
  void RL_handleWriteData();
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_restart();
  void RL_action_l55c9();
  void RL_action_l56c9();
  void RL_action_l59c9();
  void RL_action_l65c9();
  void RL_action_l69c9();
  void RL_action_l72c9();
  void RL_action_l78c9();
  void RL_action_l82c9();
  void RL_action_l85c9();
  void RL_action_l91c9();
  void RL_action_l95c9();
  void RL_action_l98c9();
  void RL_action_l104c9();
  void RL_action_d_init_np();
  void RL_action_np();
  void RL_action_l109c9();
  void RL_action_l112c9();
  void RL_action_l116c9();
  void RL_action_l119c9();
  void RL_action_l123c9();
  void RL_action_l126c9();
  void RL_action_l130c9();
  void RL_action_l133c9();
  void RL_action_d_init_np_1();
  void RL_action_np_1();
  void RL_action_l138c9();
  void RL_action_l141c9();
  void RL_action_l147c9();
  void RL_action_l150c9();
  void RL_action_l156c9();
  void RL_action_d_init_np_2();
  void RL_action_np_2();
  void RL_idle_l54c13();
  void RL_idle_l54c13_1();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_61();
  void __me_check_62();
  void __me_check_63();
  void __me_check_64();
  void __me_check_65();
  void __me_check_66();
  void __me_check_67();
  void __me_check_68();
  void __me_check_69();
  void __me_check_70();
  void __me_check_71();
  void __me_check_72();
  void __me_check_73();
  void __me_check_74();
  void __me_check_75();
  void __me_check_76();
  void __me_check_77();
  void __me_check_78();
  void __me_check_79();
  void __me_check_80();
  void __me_check_81();
  void __me_check_82();
  void __me_check_83();
  void __me_check_84();
  void __me_check_85();
  void __me_check_86();
  void __me_check_87();
  void __me_check_88();
  void __me_check_89();
  void __me_check_90();
  void __me_check_91();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTestbench &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTestbench &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing);
};

#endif /* ifndef __mkTestbench_h__ */
