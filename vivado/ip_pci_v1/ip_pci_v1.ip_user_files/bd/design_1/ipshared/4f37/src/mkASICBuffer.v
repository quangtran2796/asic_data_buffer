//
// Generated by Bluespec Compiler (build e76ca21)
//
// On Tue May 25 14:22:50 CEST 2021
//
//
// Ports:
// Name                         I/O  size props
// S00_AXI_arready                O     1
// S00_AXI_rvalid                 O     1
// S00_AXI_rdata                  O    32
// S00_AXI_rresp                  O     2
// S00_AXI_awready                O     1
// S00_AXI_wready                 O     1
// S00_AXI_bvalid                 O     1
// S00_AXI_bresp                  O     2
// M00_AXI_arvalid                O     1
// M00_AXI_arid                   O    16
// M00_AXI_araddr                 O    64
// M00_AXI_arlen                  O     8
// M00_AXI_arsize                 O     3
// M00_AXI_arburst                O     2
// M00_AXI_arlock                 O     1
// M00_AXI_arcache                O     4
// M00_AXI_arprot                 O     3
// M00_AXI_arqos                  O     4
// M00_AXI_arregion               O     4
// M00_AXI_rready                 O     1
// M00_AXI_awvalid                O     1
// M00_AXI_awid                   O    16
// M00_AXI_awaddr                 O    64
// M00_AXI_awlen                  O     8
// M00_AXI_awsize                 O     3
// M00_AXI_awburst                O     2
// M00_AXI_awlock                 O     1
// M00_AXI_awcache                O     4
// M00_AXI_awprot                 O     3
// M00_AXI_awqos                  O     4
// M00_AXI_awregion               O     4
// M00_AXI_wvalid                 O     1
// M00_AXI_wdata                  O    32
// M00_AXI_wstrb                  O     4
// M00_AXI_wlast                  O     1
// M00_AXI_bready                 O     1
// aclk                           I     1 clock
// aresetn                        I     1 reset
// S00_AXI_arvalid                I     1
// S00_AXI_araddr                 I     6 reg
// S00_AXI_arprot                 I     3 reg
// S00_AXI_rready                 I     1
// S00_AXI_awvalid                I     1
// S00_AXI_awaddr                 I     6
// S00_AXI_awprot                 I     3
// S00_AXI_wvalid                 I     1
// S00_AXI_wdata                  I    32
// S00_AXI_wstrb                  I     4
// S00_AXI_bready                 I     1
// M00_AXI_arready                I     1
// M00_AXI_rvalid                 I     1
// M00_AXI_rid                    I    16
// M00_AXI_rdata                  I    32
// M00_AXI_rresp                  I     2
// M00_AXI_rlast                  I     1
// M00_AXI_awready                I     1
// M00_AXI_wready                 I     1
// M00_AXI_bvalid                 I     1
// M00_AXI_bresp                  I     2
// M00_AXI_bid                    I    16
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkASICBuffer(aclk,
		    aresetn,

		    S00_AXI_arready,

		    S00_AXI_arvalid,

		    S00_AXI_araddr,

		    S00_AXI_arprot,

		    S00_AXI_rvalid,

		    S00_AXI_rready,

		    S00_AXI_rdata,

		    S00_AXI_rresp,

		    S00_AXI_awready,

		    S00_AXI_awvalid,

		    S00_AXI_awaddr,

		    S00_AXI_awprot,

		    S00_AXI_wready,

		    S00_AXI_wvalid,

		    S00_AXI_wdata,

		    S00_AXI_wstrb,

		    S00_AXI_bvalid,

		    S00_AXI_bready,

		    S00_AXI_bresp,

		    M00_AXI_arvalid,

		    M00_AXI_arready,

		    M00_AXI_arid,

		    M00_AXI_araddr,

		    M00_AXI_arlen,

		    M00_AXI_arsize,

		    M00_AXI_arburst,

		    M00_AXI_arlock,

		    M00_AXI_arcache,

		    M00_AXI_arprot,

		    M00_AXI_arqos,

		    M00_AXI_arregion,

		    M00_AXI_rready,

		    M00_AXI_rvalid,

		    M00_AXI_rid,
		    M00_AXI_rdata,
		    M00_AXI_rresp,
		    M00_AXI_rlast,

		    M00_AXI_awready,

		    M00_AXI_awvalid,

		    M00_AXI_awid,

		    M00_AXI_awaddr,

		    M00_AXI_awlen,

		    M00_AXI_awsize,

		    M00_AXI_awburst,

		    M00_AXI_awlock,

		    M00_AXI_awcache,

		    M00_AXI_awprot,

		    M00_AXI_awqos,

		    M00_AXI_awregion,

		    M00_AXI_wready,

		    M00_AXI_wvalid,

		    M00_AXI_wdata,

		    M00_AXI_wstrb,

		    M00_AXI_wlast,

		    M00_AXI_bvalid,

		    M00_AXI_bready,

		    M00_AXI_bresp,
		    M00_AXI_bid);
  input  aclk;
  input  aresetn;

  // value method slave_read_fab_arready
  output S00_AXI_arready;

  // action method slave_read_fab_parvalid
  input  S00_AXI_arvalid;

  // action method slave_read_fab_paraddr
  input  [5 : 0] S00_AXI_araddr;

  // action method slave_read_fab_parprot
  input  [2 : 0] S00_AXI_arprot;

  // value method slave_read_fab_rvalid
  output S00_AXI_rvalid;

  // action method slave_read_fab_prready
  input  S00_AXI_rready;

  // value method slave_read_fab_rdata
  output [31 : 0] S00_AXI_rdata;

  // value method slave_read_fab_rresp
  output [1 : 0] S00_AXI_rresp;

  // value method slave_write_fab_awready
  output S00_AXI_awready;

  // action method slave_write_fab_pawvalid
  input  S00_AXI_awvalid;

  // action method slave_write_fab_pawaddr
  input  [5 : 0] S00_AXI_awaddr;

  // action method slave_write_fab_pawprot
  input  [2 : 0] S00_AXI_awprot;

  // value method slave_write_fab_wready
  output S00_AXI_wready;

  // action method slave_write_fab_pwvalid
  input  S00_AXI_wvalid;

  // action method slave_write_fab_pwdata
  input  [31 : 0] S00_AXI_wdata;

  // action method slave_write_fab_pwstrb
  input  [3 : 0] S00_AXI_wstrb;

  // value method slave_write_fab_bvalid
  output S00_AXI_bvalid;

  // action method slave_write_fab_pbready
  input  S00_AXI_bready;

  // value method slave_write_fab_bresp
  output [1 : 0] S00_AXI_bresp;

  // value method master_read_fab_arvalid
  output M00_AXI_arvalid;

  // action method master_read_fab_parready
  input  M00_AXI_arready;

  // value method master_read_fab_arid
  output [15 : 0] M00_AXI_arid;

  // value method master_read_fab_araddr
  output [63 : 0] M00_AXI_araddr;

  // value method master_read_fab_arlen
  output [7 : 0] M00_AXI_arlen;

  // value method master_read_fab_arsize
  output [2 : 0] M00_AXI_arsize;

  // value method master_read_fab_arburst
  output [1 : 0] M00_AXI_arburst;

  // value method master_read_fab_arlock
  output M00_AXI_arlock;

  // value method master_read_fab_arcache
  output [3 : 0] M00_AXI_arcache;

  // value method master_read_fab_arprot
  output [2 : 0] M00_AXI_arprot;

  // value method master_read_fab_arqos
  output [3 : 0] M00_AXI_arqos;

  // value method master_read_fab_arregion
  output [3 : 0] M00_AXI_arregion;

  // value method master_read_fab_aruser

  // value method master_read_fab_rready
  output M00_AXI_rready;

  // action method master_read_fab_prvalid
  input  M00_AXI_rvalid;

  // action method master_read_fab_prchannel
  input  [15 : 0] M00_AXI_rid;
  input  [31 : 0] M00_AXI_rdata;
  input  [1 : 0] M00_AXI_rresp;
  input  M00_AXI_rlast;

  // action method master_write_fab_pawready
  input  M00_AXI_awready;

  // value method master_write_fab_awvalid
  output M00_AXI_awvalid;

  // value method master_write_fab_awid
  output [15 : 0] M00_AXI_awid;

  // value method master_write_fab_awaddr
  output [63 : 0] M00_AXI_awaddr;

  // value method master_write_fab_awlen
  output [7 : 0] M00_AXI_awlen;

  // value method master_write_fab_awsize
  output [2 : 0] M00_AXI_awsize;

  // value method master_write_fab_awburst
  output [1 : 0] M00_AXI_awburst;

  // value method master_write_fab_awlock
  output M00_AXI_awlock;

  // value method master_write_fab_awcache
  output [3 : 0] M00_AXI_awcache;

  // value method master_write_fab_awprot
  output [2 : 0] M00_AXI_awprot;

  // value method master_write_fab_awqos
  output [3 : 0] M00_AXI_awqos;

  // value method master_write_fab_awregion
  output [3 : 0] M00_AXI_awregion;

  // value method master_write_fab_awuser

  // action method master_write_fab_pwready
  input  M00_AXI_wready;

  // value method master_write_fab_wvalid
  output M00_AXI_wvalid;

  // value method master_write_fab_wdata
  output [31 : 0] M00_AXI_wdata;

  // value method master_write_fab_wstrb
  output [3 : 0] M00_AXI_wstrb;

  // value method master_write_fab_wlast
  output M00_AXI_wlast;

  // value method master_write_fab_wuser

  // action method master_write_fab_pbvalid
  input  M00_AXI_bvalid;

  // value method master_write_fab_bready
  output M00_AXI_bready;

  // action method master_write_fab_bin
  input  [1 : 0] M00_AXI_bresp;
  input  [15 : 0] M00_AXI_bid;

  // signals for module outputs
  wire [63 : 0] M00_AXI_araddr, M00_AXI_awaddr;
  wire [31 : 0] M00_AXI_wdata, S00_AXI_rdata;
  wire [15 : 0] M00_AXI_arid, M00_AXI_awid;
  wire [7 : 0] M00_AXI_arlen, M00_AXI_awlen;
  wire [3 : 0] M00_AXI_arcache,
	       M00_AXI_arqos,
	       M00_AXI_arregion,
	       M00_AXI_awcache,
	       M00_AXI_awqos,
	       M00_AXI_awregion,
	       M00_AXI_wstrb;
  wire [2 : 0] M00_AXI_arprot, M00_AXI_arsize, M00_AXI_awprot, M00_AXI_awsize;
  wire [1 : 0] M00_AXI_arburst, M00_AXI_awburst, S00_AXI_bresp, S00_AXI_rresp;
  wire M00_AXI_arlock,
       M00_AXI_arvalid,
       M00_AXI_awlock,
       M00_AXI_awvalid,
       M00_AXI_bready,
       M00_AXI_rready,
       M00_AXI_wlast,
       M00_AXI_wvalid,
       S00_AXI_arready,
       S00_AXI_awready,
       S00_AXI_bvalid,
       S00_AXI_rvalid,
       S00_AXI_wready;

  // inlined wires
  reg [3 : 0] master_read_warcache$wget, master_write_wawcache$wget;
  wire [108 : 0] master_read_in_wDataOut$wget,
		 master_write_in_addr_wDataIn$wget,
		 master_write_in_addr_wDataOut$wget;
  wire [50 : 0] master_read_out_1_wDataIn$wget;
  wire [36 : 0] master_write_in_data_wDataIn$wget,
		master_write_in_data_wDataOut$wget,
		slave_write_dataIn_rv$port0__write_1,
		slave_write_dataIn_rv$port1__read,
		slave_write_dataIn_rv$port2__read;
  wire [17 : 0] master_write_out_wDataIn$wget;
  wire [9 : 0] slave_write_addrIn_rv$port0__write_1,
	       slave_write_addrIn_rv$port1__read,
	       slave_write_addrIn_rv$port2__read;
  wire master_read_in_pwDequeue$whas,
       master_read_out_1_pwEnqueue$whas,
       master_write_in_addr_pwDequeue$whas,
       master_write_in_data_pwDequeue$whas,
       master_write_out_pwDequeue$whas,
       master_write_out_pwEnqueue$whas,
       slave_write_addrIn_rv$EN_port0__write,
       slave_write_addrIn_rv$EN_port1__write,
       slave_write_dataIn_rv$EN_port0__write,
       slave_write_dataIn_rv$EN_port1__write;

  // register axi_beat_count
  reg [7 : 0] axi_beat_count;
  wire [7 : 0] axi_beat_count$D_IN;
  wire axi_beat_count$EN;

  // register axi_burst_length
  reg [7 : 0] axi_burst_length;
  wire [7 : 0] axi_burst_length$D_IN;
  wire axi_burst_length$EN;

  // register ddr_size
  reg [63 : 0] ddr_size;
  wire [63 : 0] ddr_size$D_IN;
  wire ddr_size$EN;

  // register ip_current_write_address
  reg [63 : 0] ip_current_write_address;
  wire [63 : 0] ip_current_write_address$D_IN;
  wire ip_current_write_address$EN;

  // register ip_data
  reg [31 : 0] ip_data;
  wire [31 : 0] ip_data$D_IN;
  wire ip_data$EN;

  // register ip_data_amount
  reg [31 : 0] ip_data_amount;
  wire [31 : 0] ip_data_amount$D_IN;
  wire ip_data_amount$EN;

  // register ip_data_counter
  reg [31 : 0] ip_data_counter;
  wire [31 : 0] ip_data_counter$D_IN;
  wire ip_data_counter$EN;

  // register ip_data_get_start
  reg [31 : 0] ip_data_get_start;
  wire [31 : 0] ip_data_get_start$D_IN;
  wire ip_data_get_start$EN;

  // register ip_test_register
  reg [31 : 0] ip_test_register;
  wire [31 : 0] ip_test_register$D_IN;
  wire ip_test_register$EN;

  // register ip_time_setup
  reg [31 : 0] ip_time_setup;
  wire [31 : 0] ip_time_setup$D_IN;
  wire ip_time_setup$EN;

  // register master_read_in_rCache
  reg [115 : 0] master_read_in_rCache;
  wire [115 : 0] master_read_in_rCache$D_IN;
  wire master_read_in_rCache$EN;

  // register master_read_in_rRdPtr
  reg [5 : 0] master_read_in_rRdPtr;
  wire [5 : 0] master_read_in_rRdPtr$D_IN;
  wire master_read_in_rRdPtr$EN;

  // register master_read_in_rWrPtr
  reg [5 : 0] master_read_in_rWrPtr;
  wire [5 : 0] master_read_in_rWrPtr$D_IN;
  wire master_read_in_rWrPtr$EN;

  // register master_read_isRst_isInReset
  reg master_read_isRst_isInReset;
  wire master_read_isRst_isInReset$D_IN, master_read_isRst_isInReset$EN;

  // register master_read_out_1_rCache
  reg [57 : 0] master_read_out_1_rCache;
  wire [57 : 0] master_read_out_1_rCache$D_IN;
  wire master_read_out_1_rCache$EN;

  // register master_read_out_1_rRdPtr
  reg [5 : 0] master_read_out_1_rRdPtr;
  wire [5 : 0] master_read_out_1_rRdPtr$D_IN;
  wire master_read_out_1_rRdPtr$EN;

  // register master_read_out_1_rWrPtr
  reg [5 : 0] master_read_out_1_rWrPtr;
  wire [5 : 0] master_read_out_1_rWrPtr$D_IN;
  wire master_read_out_1_rWrPtr$EN;

  // register master_write_in_addr_rCache
  reg [115 : 0] master_write_in_addr_rCache;
  wire [115 : 0] master_write_in_addr_rCache$D_IN;
  wire master_write_in_addr_rCache$EN;

  // register master_write_in_addr_rRdPtr
  reg [5 : 0] master_write_in_addr_rRdPtr;
  wire [5 : 0] master_write_in_addr_rRdPtr$D_IN;
  wire master_write_in_addr_rRdPtr$EN;

  // register master_write_in_addr_rWrPtr
  reg [5 : 0] master_write_in_addr_rWrPtr;
  wire [5 : 0] master_write_in_addr_rWrPtr$D_IN;
  wire master_write_in_addr_rWrPtr$EN;

  // register master_write_in_data_rCache
  reg [43 : 0] master_write_in_data_rCache;
  wire [43 : 0] master_write_in_data_rCache$D_IN;
  wire master_write_in_data_rCache$EN;

  // register master_write_in_data_rRdPtr
  reg [5 : 0] master_write_in_data_rRdPtr;
  wire [5 : 0] master_write_in_data_rRdPtr$D_IN;
  wire master_write_in_data_rRdPtr$EN;

  // register master_write_in_data_rWrPtr
  reg [5 : 0] master_write_in_data_rWrPtr;
  wire [5 : 0] master_write_in_data_rWrPtr$D_IN;
  wire master_write_in_data_rWrPtr$EN;

  // register master_write_isRst_isInReset
  reg master_write_isRst_isInReset;
  wire master_write_isRst_isInReset$D_IN, master_write_isRst_isInReset$EN;

  // register master_write_out_rCache
  reg [24 : 0] master_write_out_rCache;
  wire [24 : 0] master_write_out_rCache$D_IN;
  wire master_write_out_rCache$EN;

  // register master_write_out_rRdPtr
  reg [5 : 0] master_write_out_rRdPtr;
  wire [5 : 0] master_write_out_rRdPtr$D_IN;
  wire master_write_out_rRdPtr$EN;

  // register master_write_out_rWrPtr
  reg [5 : 0] master_write_out_rWrPtr;
  wire [5 : 0] master_write_out_rWrPtr$D_IN;
  wire master_write_out_rWrPtr$EN;

  // register pci_start
  reg [31 : 0] pci_start;
  wire [31 : 0] pci_start$D_IN;
  wire pci_start$EN;

  // register slave_read_isRst_isInReset
  reg slave_read_isRst_isInReset;
  wire slave_read_isRst_isInReset$D_IN, slave_read_isRst_isInReset$EN;

  // register slave_write_addrIn_rv
  reg [9 : 0] slave_write_addrIn_rv;
  wire [9 : 0] slave_write_addrIn_rv$D_IN;
  wire slave_write_addrIn_rv$EN;

  // register slave_write_dataIn_rv
  reg [36 : 0] slave_write_dataIn_rv;
  wire [36 : 0] slave_write_dataIn_rv$D_IN;
  wire slave_write_dataIn_rv$EN;

  // register slave_write_isRst_isInReset
  reg slave_write_isRst_isInReset;
  wire slave_write_isRst_isInReset$D_IN, slave_write_isRst_isInReset$EN;

  // register wnext
  reg wnext;
  wire wnext$D_IN, wnext$EN;

  // ports of submodule ip_data_buffer
  wire [31 : 0] ip_data_buffer$D_IN, ip_data_buffer$D_OUT;
  wire ip_data_buffer$CLR,
       ip_data_buffer$DEQ,
       ip_data_buffer$EMPTY_N,
       ip_data_buffer$ENQ,
       ip_data_buffer$FULL_N;

  // ports of submodule master_read_in_memory
  wire [108 : 0] master_read_in_memory$DIA,
		 master_read_in_memory$DIB,
		 master_read_in_memory$DOB;
  wire [4 : 0] master_read_in_memory$ADDRA, master_read_in_memory$ADDRB;
  wire master_read_in_memory$ENA,
       master_read_in_memory$ENB,
       master_read_in_memory$WEA,
       master_read_in_memory$WEB;

  // ports of submodule master_read_out
  wire [50 : 0] master_read_out$D_IN;
  wire master_read_out$CLR, master_read_out$DEQ, master_read_out$ENQ;

  // ports of submodule master_read_out_1_memory
  wire [50 : 0] master_read_out_1_memory$DIA, master_read_out_1_memory$DIB;
  wire [4 : 0] master_read_out_1_memory$ADDRA, master_read_out_1_memory$ADDRB;
  wire master_read_out_1_memory$ENA,
       master_read_out_1_memory$ENB,
       master_read_out_1_memory$WEA,
       master_read_out_1_memory$WEB;

  // ports of submodule master_write_in_addr_memory
  wire [108 : 0] master_write_in_addr_memory$DIA,
		 master_write_in_addr_memory$DIB,
		 master_write_in_addr_memory$DOB;
  wire [4 : 0] master_write_in_addr_memory$ADDRA,
	       master_write_in_addr_memory$ADDRB;
  wire master_write_in_addr_memory$ENA,
       master_write_in_addr_memory$ENB,
       master_write_in_addr_memory$WEA,
       master_write_in_addr_memory$WEB;

  // ports of submodule master_write_in_data_memory
  wire [36 : 0] master_write_in_data_memory$DIA,
		master_write_in_data_memory$DIB,
		master_write_in_data_memory$DOB;
  wire [4 : 0] master_write_in_data_memory$ADDRA,
	       master_write_in_data_memory$ADDRB;
  wire master_write_in_data_memory$ENA,
       master_write_in_data_memory$ENB,
       master_write_in_data_memory$WEA,
       master_write_in_data_memory$WEB;

  // ports of submodule master_write_out_memory
  wire [17 : 0] master_write_out_memory$DIA, master_write_out_memory$DIB;
  wire [4 : 0] master_write_out_memory$ADDRA, master_write_out_memory$ADDRB;
  wire master_write_out_memory$ENA,
       master_write_out_memory$ENB,
       master_write_out_memory$WEA,
       master_write_out_memory$WEB;

  // ports of submodule slave_read_in
  wire [8 : 0] slave_read_in$D_IN, slave_read_in$D_OUT;
  wire slave_read_in$CLR,
       slave_read_in$DEQ,
       slave_read_in$EMPTY_N,
       slave_read_in$ENQ,
       slave_read_in$FULL_N;

  // ports of submodule slave_read_out
  wire [33 : 0] slave_read_out$D_IN, slave_read_out$D_OUT;
  wire slave_read_out$CLR,
       slave_read_out$DEQ,
       slave_read_out$EMPTY_N,
       slave_read_out$ENQ,
       slave_read_out$FULL_N;

  // ports of submodule slave_write_in
  wire [44 : 0] slave_write_in$D_IN, slave_write_in$D_OUT;
  wire slave_write_in$CLR,
       slave_write_in$DEQ,
       slave_write_in$EMPTY_N,
       slave_write_in$ENQ,
       slave_write_in$FULL_N;

  // ports of submodule slave_write_out
  wire [1 : 0] slave_write_out$D_IN, slave_write_out$D_OUT;
  wire slave_write_out$CLR,
       slave_write_out$DEQ,
       slave_write_out$EMPTY_N,
       slave_write_out$ENQ,
       slave_write_out$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_dataGenerate,
       WILL_FIRE_RL_handleWriteRequest,
       WILL_FIRE_RL_writeData,
       WILL_FIRE_RL_writeRequest;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_ip_current_write_address$write_1__VAL_2;
  wire [31 : 0] MUX_ip_data$write_1__VAL_2,
		MUX_ip_data_counter$write_1__VAL_2;
  wire MUX_ip_current_write_address$write_1__SEL_1,
       MUX_ip_current_write_address$write_1__SEL_2,
       MUX_ip_data$write_1__SEL_2;

  // remaining internal signals
  reg [31 : 0] IF_slave_read_in_first__60_BITS_8_TO_3_61_EQ_0_ETC___d482;
  reg [3 : 0] CASE_master_read_in_memoryDOB_BITS_14_TO_11_0_ETC__q2,
	      CASE_master_read_in_rCache_BITS_14_TO_11_0_mas_ETC__q1,
	      CASE_master_read_warcachewget_1_master_read_w_ETC__q3,
	      CASE_master_write_in_addr_memoryDOB_BITS_14_T_ETC__q6,
	      CASE_master_write_in_addr_rCache_BITS_14_TO_11_ETC__q5,
	      CASE_master_write_in_addr_wDataInwget_BITS_14_ETC__q4,
	      CASE_master_write_wawcachewget_1_master_write_ETC__q7;
  wire [108 : 0] IF_master_write_in_addr_wDataIn_whas__49_THEN__ETC___d285;
  wire [63 : 0] x__h13825, x__read_addr__h7631, y__h13828;
  wire [50 : 0] IF_master_read_out_1_wDataIn_whas__69_THEN_mas_ETC___d180;
  wire [31 : 0] x__h13532,
		x__read_data__h4979,
		x__read_data__h9163,
		x_data__h13024;
  wire [15 : 0] x__read_id__h4978, x__read_id__h7630;
  wire [5 : 0] x__h10228,
	       x__h10341,
	       x__h3606,
	       x__h3783,
	       x__h5060,
	       x__h5187,
	       x__h7884,
	       x__h8061,
	       x__h9236,
	       x__h9351;
  wire [3 : 0] x__read_strb__h9164;
  wire NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201,
       NOT_master_read_out_1_rRdPtr_read__86_PLUS_16__ETC___d235,
       NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407,
       NOT_master_write_in_data_rRdPtr_read__62_EQ_ma_ETC___d440,
       NOT_master_write_out_rRdPtr_read__92_PLUS_16_5_ETC___d452,
       axi_beat_count_35_EQ_axi_burst_length_20___d536,
       ip_current_write_address_18_ULT_ddr_size_76___d519,
       ip_data_02_ULT_ip_data_amount_78___d503,
       ip_data_counter_04_ULT_ip_time_setup_05___d506;

  // value method slave_read_fab_arready
  assign S00_AXI_arready =
	     !slave_read_isRst_isInReset && slave_read_in$FULL_N ;

  // value method slave_read_fab_rvalid
  assign S00_AXI_rvalid =
	     !slave_read_isRst_isInReset && slave_read_out$EMPTY_N ;

  // value method slave_read_fab_rdata
  assign S00_AXI_rdata =
	     slave_read_out$EMPTY_N ? slave_read_out$D_OUT[33:2] : 32'd0 ;

  // value method slave_read_fab_rresp
  assign S00_AXI_rresp =
	     slave_read_out$EMPTY_N ? slave_read_out$D_OUT[1:0] : 2'd0 ;

  // value method slave_write_fab_awready
  assign S00_AXI_awready =
	     !slave_write_isRst_isInReset && !slave_write_addrIn_rv[9] ;

  // value method slave_write_fab_wready
  assign S00_AXI_wready =
	     !slave_write_isRst_isInReset && !slave_write_dataIn_rv[36] ;

  // value method slave_write_fab_bvalid
  assign S00_AXI_bvalid =
	     !slave_write_isRst_isInReset && slave_write_out$EMPTY_N ;

  // value method slave_write_fab_bresp
  assign S00_AXI_bresp =
	     slave_write_out$EMPTY_N ? slave_write_out$D_OUT : 2'd0 ;

  // value method master_read_fab_arvalid
  assign M00_AXI_arvalid =
	     !master_read_isRst_isInReset &&
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 ;

  // value method master_read_fab_arid
  assign M00_AXI_arid =
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 ?
	       master_read_in_wDataOut$wget[108:93] :
	       16'd0 ;

  // value method master_read_fab_araddr
  assign M00_AXI_araddr =
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 ?
	       master_read_in_wDataOut$wget[92:29] :
	       64'd0 ;

  // value method master_read_fab_arlen
  assign M00_AXI_arlen =
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 ?
	       master_read_in_wDataOut$wget[28:21] :
	       8'd0 ;

  // value method master_read_fab_arsize
  assign M00_AXI_arsize =
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 ?
	       master_read_in_wDataOut$wget[20:18] :
	       3'd0 ;

  // value method master_read_fab_arburst
  assign M00_AXI_arburst =
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 ?
	       master_read_in_wDataOut$wget[17:16] :
	       2'd0 ;

  // value method master_read_fab_arlock
  assign M00_AXI_arlock =
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 &&
	     master_read_in_wDataOut$wget[15] ;

  // value method master_read_fab_arcache
  assign M00_AXI_arcache =
	     (!NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 ||
	      master_read_warcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_master_read_warcachewget_1_master_read_w_ETC__q3 ;

  // value method master_read_fab_arprot
  assign M00_AXI_arprot =
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 ?
	       master_read_in_wDataOut$wget[10:8] :
	       3'd0 ;

  // value method master_read_fab_arqos
  assign M00_AXI_arqos =
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 ?
	       master_read_in_wDataOut$wget[7:4] :
	       4'd0 ;

  // value method master_read_fab_arregion
  assign M00_AXI_arregion =
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 ?
	       master_read_in_wDataOut$wget[3:0] :
	       4'd0 ;

  // value method master_read_fab_rready
  assign M00_AXI_rready =
	     !master_read_isRst_isInReset &&
	     NOT_master_read_out_1_rRdPtr_read__86_PLUS_16__ETC___d235 ;

  // value method master_write_fab_awvalid
  assign M00_AXI_awvalid =
	     !master_write_isRst_isInReset &&
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 ;

  // value method master_write_fab_awid
  assign M00_AXI_awid =
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 ?
	       master_write_in_addr_wDataOut$wget[108:93] :
	       16'd0 ;

  // value method master_write_fab_awaddr
  assign M00_AXI_awaddr =
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 ?
	       master_write_in_addr_wDataOut$wget[92:29] :
	       64'd0 ;

  // value method master_write_fab_awlen
  assign M00_AXI_awlen =
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 ?
	       master_write_in_addr_wDataOut$wget[28:21] :
	       8'd0 ;

  // value method master_write_fab_awsize
  assign M00_AXI_awsize =
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 ?
	       master_write_in_addr_wDataOut$wget[20:18] :
	       3'd0 ;

  // value method master_write_fab_awburst
  assign M00_AXI_awburst =
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 ?
	       master_write_in_addr_wDataOut$wget[17:16] :
	       2'd0 ;

  // value method master_write_fab_awlock
  assign M00_AXI_awlock =
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 &&
	     master_write_in_addr_wDataOut$wget[15] ;

  // value method master_write_fab_awcache
  assign M00_AXI_awcache =
	     (!NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 ||
	      master_write_wawcache$wget == 4'd0) ?
	       4'd0 :
	       CASE_master_write_wawcachewget_1_master_write_ETC__q7 ;

  // value method master_write_fab_awprot
  assign M00_AXI_awprot =
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 ?
	       master_write_in_addr_wDataOut$wget[10:8] :
	       3'd0 ;

  // value method master_write_fab_awqos
  assign M00_AXI_awqos =
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 ?
	       master_write_in_addr_wDataOut$wget[7:4] :
	       4'd0 ;

  // value method master_write_fab_awregion
  assign M00_AXI_awregion =
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 ?
	       master_write_in_addr_wDataOut$wget[3:0] :
	       4'd0 ;

  // value method master_write_fab_wvalid
  assign M00_AXI_wvalid =
	     !master_write_isRst_isInReset &&
	     NOT_master_write_in_data_rRdPtr_read__62_EQ_ma_ETC___d440 ;

  // value method master_write_fab_wdata
  assign M00_AXI_wdata =
	     NOT_master_write_in_data_rRdPtr_read__62_EQ_ma_ETC___d440 ?
	       master_write_in_data_wDataOut$wget[36:5] :
	       32'd0 ;

  // value method master_write_fab_wstrb
  assign M00_AXI_wstrb =
	     NOT_master_write_in_data_rRdPtr_read__62_EQ_ma_ETC___d440 ?
	       master_write_in_data_wDataOut$wget[4:1] :
	       4'd0 ;

  // value method master_write_fab_wlast
  assign M00_AXI_wlast =
	     NOT_master_write_in_data_rRdPtr_read__62_EQ_ma_ETC___d440 &&
	     master_write_in_data_wDataOut$wget[0] ;

  // value method master_write_fab_bready
  assign M00_AXI_bready =
	     !master_write_isRst_isInReset &&
	     NOT_master_write_out_rRdPtr_read__92_PLUS_16_5_ETC___d452 ;

  // submodule ip_data_buffer
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd100),
	      .p3cntr_width(32'd7),
	      .guarded(32'd1)) ip_data_buffer(.RST(aresetn),
					      .CLK(aclk),
					      .D_IN(ip_data_buffer$D_IN),
					      .ENQ(ip_data_buffer$ENQ),
					      .DEQ(ip_data_buffer$DEQ),
					      .CLR(ip_data_buffer$CLR),
					      .D_OUT(ip_data_buffer$D_OUT),
					      .FULL_N(ip_data_buffer$FULL_N),
					      .EMPTY_N(ip_data_buffer$EMPTY_N));

  // submodule master_read_in_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd109),
	  .MEMSIZE(6'd32)) master_read_in_memory(.CLKA(aclk),
						 .CLKB(aclk),
						 .ADDRA(master_read_in_memory$ADDRA),
						 .ADDRB(master_read_in_memory$ADDRB),
						 .DIA(master_read_in_memory$DIA),
						 .DIB(master_read_in_memory$DIB),
						 .WEA(master_read_in_memory$WEA),
						 .WEB(master_read_in_memory$WEB),
						 .ENA(master_read_in_memory$ENA),
						 .ENB(master_read_in_memory$ENB),
						 .DOA(),
						 .DOB(master_read_in_memory$DOB));

  // submodule master_read_out
  SizedFIFO #(.p1width(32'd51),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) master_read_out(.RST(aresetn),
					       .CLK(aclk),
					       .D_IN(master_read_out$D_IN),
					       .ENQ(master_read_out$ENQ),
					       .DEQ(master_read_out$DEQ),
					       .CLR(master_read_out$CLR),
					       .D_OUT(),
					       .FULL_N(),
					       .EMPTY_N());

  // submodule master_read_out_1_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd51),
	  .MEMSIZE(6'd32)) master_read_out_1_memory(.CLKA(aclk),
						    .CLKB(aclk),
						    .ADDRA(master_read_out_1_memory$ADDRA),
						    .ADDRB(master_read_out_1_memory$ADDRB),
						    .DIA(master_read_out_1_memory$DIA),
						    .DIB(master_read_out_1_memory$DIB),
						    .WEA(master_read_out_1_memory$WEA),
						    .WEB(master_read_out_1_memory$WEB),
						    .ENA(master_read_out_1_memory$ENA),
						    .ENB(master_read_out_1_memory$ENB),
						    .DOA(),
						    .DOB());

  // submodule master_write_in_addr_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd109),
	  .MEMSIZE(6'd32)) master_write_in_addr_memory(.CLKA(aclk),
						       .CLKB(aclk),
						       .ADDRA(master_write_in_addr_memory$ADDRA),
						       .ADDRB(master_write_in_addr_memory$ADDRB),
						       .DIA(master_write_in_addr_memory$DIA),
						       .DIB(master_write_in_addr_memory$DIB),
						       .WEA(master_write_in_addr_memory$WEA),
						       .WEB(master_write_in_addr_memory$WEB),
						       .ENA(master_write_in_addr_memory$ENA),
						       .ENB(master_write_in_addr_memory$ENB),
						       .DOA(),
						       .DOB(master_write_in_addr_memory$DOB));

  // submodule master_write_in_data_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd37),
	  .MEMSIZE(6'd32)) master_write_in_data_memory(.CLKA(aclk),
						       .CLKB(aclk),
						       .ADDRA(master_write_in_data_memory$ADDRA),
						       .ADDRB(master_write_in_data_memory$ADDRB),
						       .DIA(master_write_in_data_memory$DIA),
						       .DIB(master_write_in_data_memory$DIB),
						       .WEA(master_write_in_data_memory$WEA),
						       .WEB(master_write_in_data_memory$WEB),
						       .ENA(master_write_in_data_memory$ENA),
						       .ENB(master_write_in_data_memory$ENB),
						       .DOA(),
						       .DOB(master_write_in_data_memory$DOB));

  // submodule master_write_out_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd5),
	  .DATA_WIDTH(32'd18),
	  .MEMSIZE(6'd32)) master_write_out_memory(.CLKA(aclk),
						   .CLKB(aclk),
						   .ADDRA(master_write_out_memory$ADDRA),
						   .ADDRB(master_write_out_memory$ADDRB),
						   .DIA(master_write_out_memory$DIA),
						   .DIB(master_write_out_memory$DIB),
						   .WEA(master_write_out_memory$WEA),
						   .WEB(master_write_out_memory$WEB),
						   .ENA(master_write_out_memory$ENA),
						   .ENB(master_write_out_memory$ENB),
						   .DOA(),
						   .DOB());

  // submodule slave_read_in
  FIFO2 #(.width(32'd9), .guarded(32'd1)) slave_read_in(.RST(aresetn),
							.CLK(aclk),
							.D_IN(slave_read_in$D_IN),
							.ENQ(slave_read_in$ENQ),
							.DEQ(slave_read_in$DEQ),
							.CLR(slave_read_in$CLR),
							.D_OUT(slave_read_in$D_OUT),
							.FULL_N(slave_read_in$FULL_N),
							.EMPTY_N(slave_read_in$EMPTY_N));

  // submodule slave_read_out
  FIFO2 #(.width(32'd34), .guarded(32'd1)) slave_read_out(.RST(aresetn),
							  .CLK(aclk),
							  .D_IN(slave_read_out$D_IN),
							  .ENQ(slave_read_out$ENQ),
							  .DEQ(slave_read_out$DEQ),
							  .CLR(slave_read_out$CLR),
							  .D_OUT(slave_read_out$D_OUT),
							  .FULL_N(slave_read_out$FULL_N),
							  .EMPTY_N(slave_read_out$EMPTY_N));

  // submodule slave_write_in
  FIFO2 #(.width(32'd45), .guarded(32'd1)) slave_write_in(.RST(aresetn),
							  .CLK(aclk),
							  .D_IN(slave_write_in$D_IN),
							  .ENQ(slave_write_in$ENQ),
							  .DEQ(slave_write_in$DEQ),
							  .CLR(slave_write_in$CLR),
							  .D_OUT(slave_write_in$D_OUT),
							  .FULL_N(slave_write_in$FULL_N),
							  .EMPTY_N(slave_write_in$EMPTY_N));

  // submodule slave_write_out
  FIFO2 #(.width(32'd2), .guarded(32'd1)) slave_write_out(.RST(aresetn),
							  .CLK(aclk),
							  .D_IN(slave_write_out$D_IN),
							  .ENQ(slave_write_out$ENQ),
							  .DEQ(slave_write_out$DEQ),
							  .CLR(slave_write_out$CLR),
							  .D_OUT(slave_write_out$D_OUT),
							  .FULL_N(slave_write_out$FULL_N),
							  .EMPTY_N(slave_write_out$EMPTY_N));

  // rule RL_dataGenerate
  assign WILL_FIRE_RL_dataGenerate =
	     ip_data_buffer$FULL_N && ip_data_get_start != 32'd0 ;

  // rule RL_writeData
  assign WILL_FIRE_RL_writeData =
	     master_write_in_data_rRdPtr + 6'd16 !=
	     master_write_in_data_rWrPtr &&
	     ip_data_buffer$EMPTY_N &&
	     !wnext ;

  // rule RL_writeRequest
  assign WILL_FIRE_RL_writeRequest =
	     master_write_in_addr_rRdPtr + 6'd16 !=
	     master_write_in_addr_rWrPtr &&
	     ip_data_get_start != 32'd0 &&
	     wnext ;

  // rule RL_handleWriteRequest
  assign WILL_FIRE_RL_handleWriteRequest =
	     slave_write_in$EMPTY_N && slave_write_out$FULL_N ;

  // inputs to muxes for submodule ports
  assign MUX_ip_current_write_address$write_1__SEL_1 =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[44:39] == 6'd0 ;
  assign MUX_ip_current_write_address$write_1__SEL_2 =
	     WILL_FIRE_RL_writeRequest &&
	     ip_current_write_address_18_ULT_ddr_size_76___d519 ;
  assign MUX_ip_data$write_1__SEL_2 =
	     WILL_FIRE_RL_dataGenerate &&
	     !ip_data_counter_04_ULT_ip_time_setup_05___d506 &&
	     ip_data_02_ULT_ip_data_amount_78___d503 ;
  assign MUX_ip_current_write_address$write_1__VAL_2 = x__h13825 + 64'd4 ;
  assign MUX_ip_data$write_1__VAL_2 = ip_data + 32'd1 ;
  assign MUX_ip_data_counter$write_1__VAL_2 =
	     ip_data_counter_04_ULT_ip_time_setup_05___d506 ?
	       x__h13532 :
	       32'd0 ;

  // inlined wires
  assign master_read_in_wDataOut$wget =
	     (master_read_in_rCache[115] &&
	      master_read_in_rCache[114:109] == master_read_in_rRdPtr) ?
	       { master_read_in_rCache[108:15],
		 CASE_master_read_in_rCache_BITS_14_TO_11_0_mas_ETC__q1,
		 master_read_in_rCache[10:0] } :
	       { master_read_in_memory$DOB[108:15],
		 CASE_master_read_in_memoryDOB_BITS_14_TO_11_0_ETC__q2,
		 master_read_in_memory$DOB[10:0] } ;
  assign master_read_out_1_wDataIn$wget =
	     { M00_AXI_rid, M00_AXI_rdata, M00_AXI_rresp, M00_AXI_rlast } ;
  always@(master_read_in_wDataOut$wget)
  begin
    case (master_read_in_wDataOut$wget[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  master_read_warcache$wget = master_read_in_wDataOut$wget[14:11];
      default: master_read_warcache$wget = 4'd11;
    endcase
  end
  assign master_write_in_addr_wDataIn$wget =
	     { 16'd0,
	       ip_current_write_address,
	       axi_burst_length,
	       21'd593920 } ;
  assign master_write_in_addr_wDataOut$wget =
	     (master_write_in_addr_rCache[115] &&
	      master_write_in_addr_rCache[114:109] ==
	      master_write_in_addr_rRdPtr) ?
	       { master_write_in_addr_rCache[108:15],
		 CASE_master_write_in_addr_rCache_BITS_14_TO_11_ETC__q5,
		 master_write_in_addr_rCache[10:0] } :
	       { master_write_in_addr_memory$DOB[108:15],
		 CASE_master_write_in_addr_memoryDOB_BITS_14_T_ETC__q6,
		 master_write_in_addr_memory$DOB[10:0] } ;
  assign master_write_in_data_wDataIn$wget =
	     { ip_data_buffer$D_OUT,
	       axi_beat_count_35_EQ_axi_burst_length_20___d536 ?
		 5'd31 :
		 5'd30 } ;
  assign master_write_in_data_wDataOut$wget =
	     (master_write_in_data_rCache[43] &&
	      master_write_in_data_rCache[42:37] ==
	      master_write_in_data_rRdPtr) ?
	       master_write_in_data_rCache[36:0] :
	       master_write_in_data_memory$DOB ;
  assign master_write_out_wDataIn$wget = { M00_AXI_bid, M00_AXI_bresp } ;
  always@(master_write_in_addr_wDataOut$wget)
  begin
    case (master_write_in_addr_wDataOut$wget[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  master_write_wawcache$wget =
	      master_write_in_addr_wDataOut$wget[14:11];
      default: master_write_wawcache$wget = 4'd15;
    endcase
  end
  assign master_read_in_pwDequeue$whas =
	     NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 &&
	     !master_read_isRst_isInReset &&
	     M00_AXI_arready ;
  assign master_read_out_1_pwEnqueue$whas =
	     NOT_master_read_out_1_rRdPtr_read__86_PLUS_16__ETC___d235 &&
	     !master_read_isRst_isInReset &&
	     M00_AXI_rvalid ;
  assign master_write_in_addr_pwDequeue$whas =
	     NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 &&
	     !master_write_isRst_isInReset &&
	     M00_AXI_awready ;
  assign master_write_in_data_pwDequeue$whas =
	     NOT_master_write_in_data_rRdPtr_read__62_EQ_ma_ETC___d440 &&
	     !master_write_isRst_isInReset &&
	     M00_AXI_wready ;
  assign master_write_out_pwDequeue$whas =
	     master_write_out_rRdPtr != master_write_out_rWrPtr ;
  assign master_write_out_pwEnqueue$whas =
	     NOT_master_write_out_rRdPtr_read__92_PLUS_16_5_ETC___d452 &&
	     !master_write_isRst_isInReset &&
	     M00_AXI_bvalid ;
  assign slave_write_addrIn_rv$EN_port0__write =
	     !slave_write_addrIn_rv[9] && !slave_write_isRst_isInReset &&
	     S00_AXI_awvalid ;
  assign slave_write_addrIn_rv$port0__write_1 =
	     { 1'd1, S00_AXI_awaddr, S00_AXI_awprot } ;
  assign slave_write_addrIn_rv$port1__read =
	     slave_write_addrIn_rv$EN_port0__write ?
	       slave_write_addrIn_rv$port0__write_1 :
	       slave_write_addrIn_rv ;
  assign slave_write_addrIn_rv$EN_port1__write =
	     slave_write_addrIn_rv$port1__read[9] &&
	     slave_write_dataIn_rv$port1__read[36] &&
	     slave_write_in$FULL_N ;
  assign slave_write_addrIn_rv$port2__read =
	     slave_write_addrIn_rv$EN_port1__write ?
	       10'd170 :
	       slave_write_addrIn_rv$port1__read ;
  assign slave_write_dataIn_rv$EN_port0__write =
	     !slave_write_dataIn_rv[36] && !slave_write_isRst_isInReset &&
	     S00_AXI_wvalid ;
  assign slave_write_dataIn_rv$port0__write_1 =
	     { 1'd1, S00_AXI_wdata, S00_AXI_wstrb } ;
  assign slave_write_dataIn_rv$port1__read =
	     slave_write_dataIn_rv$EN_port0__write ?
	       slave_write_dataIn_rv$port0__write_1 :
	       slave_write_dataIn_rv ;
  assign slave_write_dataIn_rv$EN_port1__write =
	     slave_write_addrIn_rv$port1__read[9] &&
	     slave_write_dataIn_rv$port1__read[36] &&
	     slave_write_in$FULL_N ;
  assign slave_write_dataIn_rv$port2__read =
	     slave_write_dataIn_rv$EN_port1__write ?
	       37'h0AAAAAAAAA :
	       slave_write_dataIn_rv$port1__read ;

  // register axi_beat_count
  assign axi_beat_count$D_IN =
	     axi_beat_count_35_EQ_axi_burst_length_20___d536 ?
	       8'd0 :
	       axi_beat_count + 8'd1 ;
  assign axi_beat_count$EN = WILL_FIRE_RL_writeData ;

  // register axi_burst_length
  assign axi_burst_length$D_IN = 8'h0 ;
  assign axi_burst_length$EN = 1'b0 ;

  // register ddr_size
  assign ddr_size$D_IN = { 32'd0, slave_write_in$D_OUT[38:7] } ;
  assign ddr_size$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[44:39] == 6'd16 ;

  // register ip_current_write_address
  assign ip_current_write_address$D_IN =
	     MUX_ip_current_write_address$write_1__SEL_1 ?
	       64'd0 :
	       MUX_ip_current_write_address$write_1__VAL_2 ;
  assign ip_current_write_address$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[44:39] == 6'd0 ||
	     WILL_FIRE_RL_writeRequest &&
	     ip_current_write_address_18_ULT_ddr_size_76___d519 ;

  // register ip_data
  assign ip_data$D_IN =
	     MUX_ip_current_write_address$write_1__SEL_1 ?
	       32'd0 :
	       MUX_ip_data$write_1__VAL_2 ;
  assign ip_data$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[44:39] == 6'd0 ||
	     WILL_FIRE_RL_dataGenerate &&
	     !ip_data_counter_04_ULT_ip_time_setup_05___d506 &&
	     ip_data_02_ULT_ip_data_amount_78___d503 ;

  // register ip_data_amount
  assign ip_data_amount$D_IN = slave_write_in$D_OUT[38:7] ;
  assign ip_data_amount$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[44:39] == 6'd32 ;

  // register ip_data_counter
  assign ip_data_counter$D_IN =
	     MUX_ip_current_write_address$write_1__SEL_1 ?
	       32'd0 :
	       MUX_ip_data_counter$write_1__VAL_2 ;
  assign ip_data_counter$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[44:39] == 6'd0 ||
	     WILL_FIRE_RL_dataGenerate &&
	     ip_data_02_ULT_ip_data_amount_78___d503 ;

  // register ip_data_get_start
  assign ip_data_get_start$D_IN =
	     MUX_ip_current_write_address$write_1__SEL_1 ?
	       slave_write_in$D_OUT[38:7] :
	       32'd0 ;
  assign ip_data_get_start$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[44:39] == 6'd0 ||
	     WILL_FIRE_RL_writeRequest &&
	     !ip_current_write_address_18_ULT_ddr_size_76___d519 ;

  // register ip_test_register
  assign ip_test_register$D_IN = slave_write_in$D_OUT[38:7] ;
  assign ip_test_register$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[44:39] == 6'd8 ;

  // register ip_time_setup
  assign ip_time_setup$D_IN = 32'h0 ;
  assign ip_time_setup$EN = 1'b0 ;

  // register master_read_in_rCache
  assign master_read_in_rCache$D_IN =
	     { 1'd1, master_read_in_rWrPtr, 109'd0 } ;
  assign master_read_in_rCache$EN = 1'b0 ;

  // register master_read_in_rRdPtr
  assign master_read_in_rRdPtr$D_IN = x__h3783 ;
  assign master_read_in_rRdPtr$EN = master_read_in_pwDequeue$whas ;

  // register master_read_in_rWrPtr
  assign master_read_in_rWrPtr$D_IN = x__h3606 ;
  assign master_read_in_rWrPtr$EN = 1'b0 ;

  // register master_read_isRst_isInReset
  assign master_read_isRst_isInReset$D_IN = 1'd0 ;
  assign master_read_isRst_isInReset$EN = master_read_isRst_isInReset ;

  // register master_read_out_1_rCache
  assign master_read_out_1_rCache$D_IN =
	     { 1'd1,
	       master_read_out_1_rWrPtr,
	       IF_master_read_out_1_wDataIn_whas__69_THEN_mas_ETC___d180 } ;
  assign master_read_out_1_rCache$EN = master_read_out_1_pwEnqueue$whas ;

  // register master_read_out_1_rRdPtr
  assign master_read_out_1_rRdPtr$D_IN = x__h5187 ;
  assign master_read_out_1_rRdPtr$EN = 1'b0 ;

  // register master_read_out_1_rWrPtr
  assign master_read_out_1_rWrPtr$D_IN = x__h5060 ;
  assign master_read_out_1_rWrPtr$EN = master_read_out_1_pwEnqueue$whas ;

  // register master_write_in_addr_rCache
  assign master_write_in_addr_rCache$D_IN =
	     { 1'd1,
	       master_write_in_addr_rWrPtr,
	       IF_master_write_in_addr_wDataIn_whas__49_THEN__ETC___d285 } ;
  assign master_write_in_addr_rCache$EN =
	     MUX_ip_current_write_address$write_1__SEL_2 ;

  // register master_write_in_addr_rRdPtr
  assign master_write_in_addr_rRdPtr$D_IN = x__h8061 ;
  assign master_write_in_addr_rRdPtr$EN =
	     master_write_in_addr_pwDequeue$whas ;

  // register master_write_in_addr_rWrPtr
  assign master_write_in_addr_rWrPtr$D_IN = x__h7884 ;
  assign master_write_in_addr_rWrPtr$EN =
	     MUX_ip_current_write_address$write_1__SEL_2 ;

  // register master_write_in_data_rCache
  assign master_write_in_data_rCache$D_IN =
	     { 1'd1,
	       master_write_in_data_rWrPtr,
	       x__read_data__h9163,
	       x__read_strb__h9164,
	       WILL_FIRE_RL_writeData &&
	       master_write_in_data_wDataIn$wget[0] } ;
  assign master_write_in_data_rCache$EN = WILL_FIRE_RL_writeData ;

  // register master_write_in_data_rRdPtr
  assign master_write_in_data_rRdPtr$D_IN = x__h9351 ;
  assign master_write_in_data_rRdPtr$EN =
	     master_write_in_data_pwDequeue$whas ;

  // register master_write_in_data_rWrPtr
  assign master_write_in_data_rWrPtr$D_IN = x__h9236 ;
  assign master_write_in_data_rWrPtr$EN = WILL_FIRE_RL_writeData ;

  // register master_write_isRst_isInReset
  assign master_write_isRst_isInReset$D_IN = 1'd0 ;
  assign master_write_isRst_isInReset$EN = master_write_isRst_isInReset ;

  // register master_write_out_rCache
  assign master_write_out_rCache$D_IN =
	     { 1'd1,
	       master_write_out_rWrPtr,
	       master_write_out_pwEnqueue$whas ?
		 master_write_out_wDataIn$wget :
		 18'd0 } ;
  assign master_write_out_rCache$EN = master_write_out_pwEnqueue$whas ;

  // register master_write_out_rRdPtr
  assign master_write_out_rRdPtr$D_IN = x__h10341 ;
  assign master_write_out_rRdPtr$EN = master_write_out_pwDequeue$whas ;

  // register master_write_out_rWrPtr
  assign master_write_out_rWrPtr$D_IN = x__h10228 ;
  assign master_write_out_rWrPtr$EN = master_write_out_pwEnqueue$whas ;

  // register pci_start
  assign pci_start$D_IN =
	     MUX_ip_current_write_address$write_1__SEL_1 ? 32'd0 : 32'd1 ;
  assign pci_start$EN =
	     WILL_FIRE_RL_handleWriteRequest &&
	     slave_write_in$D_OUT[44:39] == 6'd0 ||
	     WILL_FIRE_RL_writeRequest &&
	     !ip_current_write_address_18_ULT_ddr_size_76___d519 ;

  // register slave_read_isRst_isInReset
  assign slave_read_isRst_isInReset$D_IN = 1'd0 ;
  assign slave_read_isRst_isInReset$EN = slave_read_isRst_isInReset ;

  // register slave_write_addrIn_rv
  assign slave_write_addrIn_rv$D_IN = slave_write_addrIn_rv$port2__read ;
  assign slave_write_addrIn_rv$EN = 1'b1 ;

  // register slave_write_dataIn_rv
  assign slave_write_dataIn_rv$D_IN = slave_write_dataIn_rv$port2__read ;
  assign slave_write_dataIn_rv$EN = 1'b1 ;

  // register slave_write_isRst_isInReset
  assign slave_write_isRst_isInReset$D_IN = 1'd0 ;
  assign slave_write_isRst_isInReset$EN = slave_write_isRst_isInReset ;

  // register wnext
  assign wnext$D_IN = !MUX_ip_current_write_address$write_1__SEL_2 ;
  assign wnext$EN =
	     WILL_FIRE_RL_writeRequest &&
	     ip_current_write_address_18_ULT_ddr_size_76___d519 ||
	     WILL_FIRE_RL_writeData &&
	     axi_beat_count_35_EQ_axi_burst_length_20___d536 ;

  // submodule ip_data_buffer
  assign ip_data_buffer$D_IN = ip_data ;
  assign ip_data_buffer$ENQ = MUX_ip_data$write_1__SEL_2 ;
  assign ip_data_buffer$DEQ = WILL_FIRE_RL_writeData ;
  assign ip_data_buffer$CLR = MUX_ip_current_write_address$write_1__SEL_1 ;

  // submodule master_read_in_memory
  assign master_read_in_memory$ADDRA = master_read_in_rWrPtr[4:0] ;
  assign master_read_in_memory$ADDRB =
	     master_read_in_pwDequeue$whas ?
	       x__h3783[4:0] :
	       master_read_in_rRdPtr[4:0] ;
  assign master_read_in_memory$DIA = 109'd0 ;
  assign master_read_in_memory$DIB =
	     109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign master_read_in_memory$WEA = 1'b0 ;
  assign master_read_in_memory$WEB = 1'd0 ;
  assign master_read_in_memory$ENA = 1'b1 ;
  assign master_read_in_memory$ENB = 1'b1 ;

  // submodule master_read_out
  assign master_read_out$D_IN = 51'h0 ;
  assign master_read_out$ENQ = 1'b0 ;
  assign master_read_out$DEQ = 1'b0 ;
  assign master_read_out$CLR = 1'b0 ;

  // submodule master_read_out_1_memory
  assign master_read_out_1_memory$ADDRA = master_read_out_1_rWrPtr[4:0] ;
  assign master_read_out_1_memory$ADDRB = master_read_out_1_rRdPtr[4:0] ;
  assign master_read_out_1_memory$DIA =
	     IF_master_read_out_1_wDataIn_whas__69_THEN_mas_ETC___d180 ;
  assign master_read_out_1_memory$DIB =
	     51'h2AAAAAAAAAAAA /* unspecified value */  ;
  assign master_read_out_1_memory$WEA = master_read_out_1_pwEnqueue$whas ;
  assign master_read_out_1_memory$WEB = 1'd0 ;
  assign master_read_out_1_memory$ENA = 1'b1 ;
  assign master_read_out_1_memory$ENB = 1'b1 ;

  // submodule master_write_in_addr_memory
  assign master_write_in_addr_memory$ADDRA =
	     master_write_in_addr_rWrPtr[4:0] ;
  assign master_write_in_addr_memory$ADDRB =
	     master_write_in_addr_pwDequeue$whas ?
	       x__h8061[4:0] :
	       master_write_in_addr_rRdPtr[4:0] ;
  assign master_write_in_addr_memory$DIA =
	     IF_master_write_in_addr_wDataIn_whas__49_THEN__ETC___d285 ;
  assign master_write_in_addr_memory$DIB =
	     109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign master_write_in_addr_memory$WEA =
	     MUX_ip_current_write_address$write_1__SEL_2 ;
  assign master_write_in_addr_memory$WEB = 1'd0 ;
  assign master_write_in_addr_memory$ENA = 1'b1 ;
  assign master_write_in_addr_memory$ENB = 1'b1 ;

  // submodule master_write_in_data_memory
  assign master_write_in_data_memory$ADDRA =
	     master_write_in_data_rWrPtr[4:0] ;
  assign master_write_in_data_memory$ADDRB =
	     master_write_in_data_pwDequeue$whas ?
	       x__h9351[4:0] :
	       master_write_in_data_rRdPtr[4:0] ;
  assign master_write_in_data_memory$DIA =
	     { x__read_data__h9163,
	       x__read_strb__h9164,
	       WILL_FIRE_RL_writeData &&
	       master_write_in_data_wDataIn$wget[0] } ;
  assign master_write_in_data_memory$DIB =
	     37'h0AAAAAAAAA /* unspecified value */  ;
  assign master_write_in_data_memory$WEA = WILL_FIRE_RL_writeData ;
  assign master_write_in_data_memory$WEB = 1'd0 ;
  assign master_write_in_data_memory$ENA = 1'b1 ;
  assign master_write_in_data_memory$ENB = 1'b1 ;

  // submodule master_write_out_memory
  assign master_write_out_memory$ADDRA = master_write_out_rWrPtr[4:0] ;
  assign master_write_out_memory$ADDRB =
	     master_write_out_pwDequeue$whas ?
	       x__h10341[4:0] :
	       master_write_out_rRdPtr[4:0] ;
  assign master_write_out_memory$DIA =
	     master_write_out_pwEnqueue$whas ?
	       master_write_out_wDataIn$wget :
	       18'd0 ;
  assign master_write_out_memory$DIB =
	     18'b101010101010101010 /* unspecified value */  ;
  assign master_write_out_memory$WEA = master_write_out_pwEnqueue$whas ;
  assign master_write_out_memory$WEB = 1'd0 ;
  assign master_write_out_memory$ENA = 1'b1 ;
  assign master_write_out_memory$ENB = 1'b1 ;

  // submodule slave_read_in
  assign slave_read_in$D_IN = { S00_AXI_araddr, S00_AXI_arprot } ;
  assign slave_read_in$ENQ =
	     slave_read_in$FULL_N && !slave_read_isRst_isInReset &&
	     S00_AXI_arvalid ;
  assign slave_read_in$DEQ = slave_read_in$EMPTY_N && slave_read_out$FULL_N ;
  assign slave_read_in$CLR = 1'b0 ;

  // submodule slave_read_out
  assign slave_read_out$D_IN =
	     { IF_slave_read_in_first__60_BITS_8_TO_3_61_EQ_0_ETC___d482,
	       2'd0 } ;
  assign slave_read_out$ENQ =
	     slave_read_in$EMPTY_N && slave_read_out$FULL_N &&
	     (slave_read_in$D_OUT[8:3] == 6'd0 ||
	      slave_read_in$D_OUT[8:3] == 6'd4 ||
	      slave_read_in$D_OUT[8:3] == 6'd8 ||
	      slave_read_in$D_OUT[8:3] == 6'd16 ||
	      slave_read_in$D_OUT[8:3] == 6'd32) ;
  assign slave_read_out$DEQ =
	     slave_read_out$EMPTY_N && !slave_read_isRst_isInReset &&
	     S00_AXI_rready ;
  assign slave_read_out$CLR = 1'b0 ;

  // submodule slave_write_in
  assign slave_write_in$D_IN =
	     { slave_write_addrIn_rv$port1__read[8:3],
	       slave_write_dataIn_rv$port1__read[35:0],
	       slave_write_addrIn_rv$port1__read[2:0] } ;
  assign slave_write_in$ENQ =
	     slave_write_addrIn_rv$port1__read[9] &&
	     slave_write_dataIn_rv$port1__read[36] &&
	     slave_write_in$FULL_N ;
  assign slave_write_in$DEQ = WILL_FIRE_RL_handleWriteRequest ;
  assign slave_write_in$CLR = 1'b0 ;

  // submodule slave_write_out
  assign slave_write_out$D_IN = 2'd0 ;
  assign slave_write_out$ENQ =
	     WILL_FIRE_RL_handleWriteRequest &&
	     (slave_write_in$D_OUT[44:39] == 6'd0 ||
	      slave_write_in$D_OUT[44:39] == 6'd8 ||
	      slave_write_in$D_OUT[44:39] == 6'd16 ||
	      slave_write_in$D_OUT[44:39] == 6'd32) ;
  assign slave_write_out$DEQ =
	     slave_write_out$EMPTY_N && !slave_write_isRst_isInReset &&
	     S00_AXI_bready ;
  assign slave_write_out$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_master_read_out_1_wDataIn_whas__69_THEN_mas_ETC___d180 =
	     { x__read_id__h4978,
	       x__read_data__h4979,
	       master_read_out_1_pwEnqueue$whas ?
		 master_read_out_1_wDataIn$wget[2:1] :
		 2'd0,
	       master_read_out_1_pwEnqueue$whas &&
	       master_read_out_1_wDataIn$wget[0] } ;
  assign IF_master_write_in_addr_wDataIn_whas__49_THEN__ETC___d285 =
	     { x__read_id__h7630,
	       x__read_addr__h7631,
	       MUX_ip_current_write_address$write_1__SEL_2 ?
		 master_write_in_addr_wDataIn$wget[28:21] :
		 8'd0,
	       MUX_ip_current_write_address$write_1__SEL_2 ?
		 master_write_in_addr_wDataIn$wget[20:18] :
		 3'd0,
	       MUX_ip_current_write_address$write_1__SEL_2 ?
		 master_write_in_addr_wDataIn$wget[17:16] :
		 2'd0,
	       MUX_ip_current_write_address$write_1__SEL_2 &&
	       master_write_in_addr_wDataIn$wget[15],
	       (!MUX_ip_current_write_address$write_1__SEL_2 ||
		master_write_in_addr_wDataIn$wget[14:11] == 4'd0) ?
		 4'd0 :
		 CASE_master_write_in_addr_wDataInwget_BITS_14_ETC__q4,
	       MUX_ip_current_write_address$write_1__SEL_2 ?
		 master_write_in_addr_wDataIn$wget[10:0] :
		 11'd0 } ;
  assign NOT_master_read_in_rRdPtr_read__12_EQ_master_r_ETC___d201 =
	     master_read_in_rRdPtr != master_read_in_rWrPtr ;
  assign NOT_master_read_out_1_rRdPtr_read__86_PLUS_16__ETC___d235 =
	     master_read_out_1_rRdPtr + 6'd16 != master_read_out_1_rWrPtr ;
  assign NOT_master_write_in_addr_rRdPtr_read__91_EQ_ma_ETC___d407 =
	     master_write_in_addr_rRdPtr != master_write_in_addr_rWrPtr ;
  assign NOT_master_write_in_data_rRdPtr_read__62_EQ_ma_ETC___d440 =
	     master_write_in_data_rRdPtr != master_write_in_data_rWrPtr ;
  assign NOT_master_write_out_rRdPtr_read__92_PLUS_16_5_ETC___d452 =
	     master_write_out_rRdPtr + 6'd16 != master_write_out_rWrPtr ;
  assign axi_beat_count_35_EQ_axi_burst_length_20___d536 =
	     axi_beat_count == axi_burst_length ;
  assign ip_current_write_address_18_ULT_ddr_size_76___d519 =
	     ip_current_write_address < ddr_size ;
  assign ip_data_02_ULT_ip_data_amount_78___d503 = ip_data < ip_data_amount ;
  assign ip_data_counter_04_ULT_ip_time_setup_05___d506 =
	     ip_data_counter < ip_time_setup ;
  assign x__h10228 = master_write_out_rWrPtr + 6'd1 ;
  assign x__h10341 = master_write_out_rRdPtr + 6'd1 ;
  assign x__h13532 = ip_data_counter + 32'd1 ;
  assign x__h13825 = ip_current_write_address + y__h13828 ;
  assign x__h3606 = master_read_in_rWrPtr + 6'd1 ;
  assign x__h3783 = master_read_in_rRdPtr + 6'd1 ;
  assign x__h5060 = master_read_out_1_rWrPtr + 6'd1 ;
  assign x__h5187 = master_read_out_1_rRdPtr + 6'd1 ;
  assign x__h7884 = master_write_in_addr_rWrPtr + 6'd1 ;
  assign x__h8061 = master_write_in_addr_rRdPtr + 6'd1 ;
  assign x__h9236 = master_write_in_data_rWrPtr + 6'd1 ;
  assign x__h9351 = master_write_in_data_rRdPtr + 6'd1 ;
  assign x__read_addr__h7631 =
	     MUX_ip_current_write_address$write_1__SEL_2 ?
	       master_write_in_addr_wDataIn$wget[92:29] :
	       64'd0 ;
  assign x__read_data__h4979 =
	     master_read_out_1_pwEnqueue$whas ?
	       master_read_out_1_wDataIn$wget[34:3] :
	       32'd0 ;
  assign x__read_data__h9163 =
	     WILL_FIRE_RL_writeData ?
	       master_write_in_data_wDataIn$wget[36:5] :
	       32'd0 ;
  assign x__read_id__h4978 =
	     master_read_out_1_pwEnqueue$whas ?
	       master_read_out_1_wDataIn$wget[50:35] :
	       16'd0 ;
  assign x__read_id__h7630 =
	     MUX_ip_current_write_address$write_1__SEL_2 ?
	       master_write_in_addr_wDataIn$wget[108:93] :
	       16'd0 ;
  assign x__read_strb__h9164 =
	     WILL_FIRE_RL_writeData ?
	       master_write_in_data_wDataIn$wget[4:1] :
	       4'd0 ;
  assign x_data__h13024 = { ip_test_register[30:0], 1'd0 } ;
  assign y__h13828 = { 54'd0, axi_burst_length, 2'd0 } ;
  always@(slave_read_in$D_OUT or
	  ip_data_amount or
	  ip_data_get_start or pci_start or x_data__h13024 or ddr_size)
  begin
    case (slave_read_in$D_OUT[8:3])
      6'd0:
	  IF_slave_read_in_first__60_BITS_8_TO_3_61_EQ_0_ETC___d482 =
	      ip_data_get_start;
      6'd4:
	  IF_slave_read_in_first__60_BITS_8_TO_3_61_EQ_0_ETC___d482 =
	      pci_start;
      6'd8:
	  IF_slave_read_in_first__60_BITS_8_TO_3_61_EQ_0_ETC___d482 =
	      x_data__h13024;
      6'd16:
	  IF_slave_read_in_first__60_BITS_8_TO_3_61_EQ_0_ETC___d482 =
	      ddr_size[31:0];
      default: IF_slave_read_in_first__60_BITS_8_TO_3_61_EQ_0_ETC___d482 =
		   ip_data_amount;
    endcase
  end
  always@(master_read_in_rCache)
  begin
    case (master_read_in_rCache[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_master_read_in_rCache_BITS_14_TO_11_0_mas_ETC__q1 =
	      master_read_in_rCache[14:11];
      default: CASE_master_read_in_rCache_BITS_14_TO_11_0_mas_ETC__q1 = 4'd11;
    endcase
  end
  always@(master_read_in_memory$DOB)
  begin
    case (master_read_in_memory$DOB[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_master_read_in_memoryDOB_BITS_14_TO_11_0_ETC__q2 =
	      master_read_in_memory$DOB[14:11];
      default: CASE_master_read_in_memoryDOB_BITS_14_TO_11_0_ETC__q2 = 4'd11;
    endcase
  end
  always@(master_read_warcache$wget)
  begin
    case (master_read_warcache$wget)
      4'd1, 4'd2, 4'd3, 4'd10, 4'd14, 4'd15:
	  CASE_master_read_warcachewget_1_master_read_w_ETC__q3 =
	      master_read_warcache$wget;
      default: CASE_master_read_warcachewget_1_master_read_w_ETC__q3 = 4'd11;
    endcase
  end
  always@(master_write_in_addr_wDataIn$wget)
  begin
    case (master_write_in_addr_wDataIn$wget[14:11])
      4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_master_write_in_addr_wDataInwget_BITS_14_ETC__q4 =
	      master_write_in_addr_wDataIn$wget[14:11];
      default: CASE_master_write_in_addr_wDataInwget_BITS_14_ETC__q4 = 4'd15;
    endcase
  end
  always@(master_write_in_addr_rCache)
  begin
    case (master_write_in_addr_rCache[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_master_write_in_addr_rCache_BITS_14_TO_11_ETC__q5 =
	      master_write_in_addr_rCache[14:11];
      default: CASE_master_write_in_addr_rCache_BITS_14_TO_11_ETC__q5 = 4'd15;
    endcase
  end
  always@(master_write_in_addr_memory$DOB)
  begin
    case (master_write_in_addr_memory$DOB[14:11])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_master_write_in_addr_memoryDOB_BITS_14_T_ETC__q6 =
	      master_write_in_addr_memory$DOB[14:11];
      default: CASE_master_write_in_addr_memoryDOB_BITS_14_T_ETC__q6 = 4'd15;
    endcase
  end
  always@(master_write_wawcache$wget)
  begin
    case (master_write_wawcache$wget)
      4'd1, 4'd2, 4'd3, 4'd6, 4'd7, 4'd14:
	  CASE_master_write_wawcachewget_1_master_write_ETC__q7 =
	      master_write_wawcache$wget;
      default: CASE_master_write_wawcachewget_1_master_write_ETC__q7 = 4'd15;
    endcase
  end

  // handling of inlined registers

  always@(posedge aclk)
  begin
    if (aresetn == `BSV_RESET_VALUE)
      begin
        axi_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	axi_burst_length <= `BSV_ASSIGNMENT_DELAY 8'd3;
	ddr_size <= `BSV_ASSIGNMENT_DELAY 64'd400;
	ip_current_write_address <= `BSV_ASSIGNMENT_DELAY 64'd0;
	ip_data <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ip_data_amount <= `BSV_ASSIGNMENT_DELAY 32'd1000;
	ip_data_counter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ip_data_get_start <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ip_test_register <= `BSV_ASSIGNMENT_DELAY 32'd0;
	ip_time_setup <= `BSV_ASSIGNMENT_DELAY 32'd1;
	master_read_in_rCache <= `BSV_ASSIGNMENT_DELAY
	    116'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	master_read_in_rRdPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	master_read_in_rWrPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	master_read_out_1_rCache <= `BSV_ASSIGNMENT_DELAY 58'h0AAAAAAAAAAAAAA;
	master_read_out_1_rRdPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	master_read_out_1_rWrPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	master_write_in_addr_rCache <= `BSV_ASSIGNMENT_DELAY
	    116'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	master_write_in_addr_rRdPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	master_write_in_addr_rWrPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	master_write_in_data_rCache <= `BSV_ASSIGNMENT_DELAY 44'h2AAAAAAAAAA;
	master_write_in_data_rRdPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	master_write_in_data_rWrPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	master_write_out_rCache <= `BSV_ASSIGNMENT_DELAY 25'd11184810;
	master_write_out_rRdPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	master_write_out_rWrPtr <= `BSV_ASSIGNMENT_DELAY 6'd0;
	pci_start <= `BSV_ASSIGNMENT_DELAY 32'd0;
	slave_write_addrIn_rv <= `BSV_ASSIGNMENT_DELAY 10'd170;
	slave_write_dataIn_rv <= `BSV_ASSIGNMENT_DELAY 37'h0AAAAAAAAA;
	wnext <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (axi_beat_count$EN)
	  axi_beat_count <= `BSV_ASSIGNMENT_DELAY axi_beat_count$D_IN;
	if (axi_burst_length$EN)
	  axi_burst_length <= `BSV_ASSIGNMENT_DELAY axi_burst_length$D_IN;
	if (ddr_size$EN) ddr_size <= `BSV_ASSIGNMENT_DELAY ddr_size$D_IN;
	if (ip_current_write_address$EN)
	  ip_current_write_address <= `BSV_ASSIGNMENT_DELAY
	      ip_current_write_address$D_IN;
	if (ip_data$EN) ip_data <= `BSV_ASSIGNMENT_DELAY ip_data$D_IN;
	if (ip_data_amount$EN)
	  ip_data_amount <= `BSV_ASSIGNMENT_DELAY ip_data_amount$D_IN;
	if (ip_data_counter$EN)
	  ip_data_counter <= `BSV_ASSIGNMENT_DELAY ip_data_counter$D_IN;
	if (ip_data_get_start$EN)
	  ip_data_get_start <= `BSV_ASSIGNMENT_DELAY ip_data_get_start$D_IN;
	if (ip_test_register$EN)
	  ip_test_register <= `BSV_ASSIGNMENT_DELAY ip_test_register$D_IN;
	if (ip_time_setup$EN)
	  ip_time_setup <= `BSV_ASSIGNMENT_DELAY ip_time_setup$D_IN;
	if (master_read_in_rCache$EN)
	  master_read_in_rCache <= `BSV_ASSIGNMENT_DELAY
	      master_read_in_rCache$D_IN;
	if (master_read_in_rRdPtr$EN)
	  master_read_in_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      master_read_in_rRdPtr$D_IN;
	if (master_read_in_rWrPtr$EN)
	  master_read_in_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      master_read_in_rWrPtr$D_IN;
	if (master_read_out_1_rCache$EN)
	  master_read_out_1_rCache <= `BSV_ASSIGNMENT_DELAY
	      master_read_out_1_rCache$D_IN;
	if (master_read_out_1_rRdPtr$EN)
	  master_read_out_1_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      master_read_out_1_rRdPtr$D_IN;
	if (master_read_out_1_rWrPtr$EN)
	  master_read_out_1_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      master_read_out_1_rWrPtr$D_IN;
	if (master_write_in_addr_rCache$EN)
	  master_write_in_addr_rCache <= `BSV_ASSIGNMENT_DELAY
	      master_write_in_addr_rCache$D_IN;
	if (master_write_in_addr_rRdPtr$EN)
	  master_write_in_addr_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      master_write_in_addr_rRdPtr$D_IN;
	if (master_write_in_addr_rWrPtr$EN)
	  master_write_in_addr_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      master_write_in_addr_rWrPtr$D_IN;
	if (master_write_in_data_rCache$EN)
	  master_write_in_data_rCache <= `BSV_ASSIGNMENT_DELAY
	      master_write_in_data_rCache$D_IN;
	if (master_write_in_data_rRdPtr$EN)
	  master_write_in_data_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      master_write_in_data_rRdPtr$D_IN;
	if (master_write_in_data_rWrPtr$EN)
	  master_write_in_data_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      master_write_in_data_rWrPtr$D_IN;
	if (master_write_out_rCache$EN)
	  master_write_out_rCache <= `BSV_ASSIGNMENT_DELAY
	      master_write_out_rCache$D_IN;
	if (master_write_out_rRdPtr$EN)
	  master_write_out_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      master_write_out_rRdPtr$D_IN;
	if (master_write_out_rWrPtr$EN)
	  master_write_out_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      master_write_out_rWrPtr$D_IN;
	if (pci_start$EN) pci_start <= `BSV_ASSIGNMENT_DELAY pci_start$D_IN;
	if (slave_write_addrIn_rv$EN)
	  slave_write_addrIn_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_write_addrIn_rv$D_IN;
	if (slave_write_dataIn_rv$EN)
	  slave_write_dataIn_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_write_dataIn_rv$D_IN;
	if (wnext$EN) wnext <= `BSV_ASSIGNMENT_DELAY wnext$D_IN;
      end
  end

  always@(posedge aclk or `BSV_RESET_EDGE aresetn)
  if (aresetn == `BSV_RESET_VALUE)
    begin
      master_read_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      master_write_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      slave_read_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
      slave_write_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (master_read_isRst_isInReset$EN)
	master_read_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    master_read_isRst_isInReset$D_IN;
      if (master_write_isRst_isInReset$EN)
	master_write_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    master_write_isRst_isInReset$D_IN;
      if (slave_read_isRst_isInReset$EN)
	slave_read_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    slave_read_isRst_isInReset$D_IN;
      if (slave_write_isRst_isInReset$EN)
	slave_write_isRst_isInReset <= `BSV_ASSIGNMENT_DELAY
	    slave_write_isRst_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    axi_beat_count = 8'hAA;
    axi_burst_length = 8'hAA;
    ddr_size = 64'hAAAAAAAAAAAAAAAA;
    ip_current_write_address = 64'hAAAAAAAAAAAAAAAA;
    ip_data = 32'hAAAAAAAA;
    ip_data_amount = 32'hAAAAAAAA;
    ip_data_counter = 32'hAAAAAAAA;
    ip_data_get_start = 32'hAAAAAAAA;
    ip_test_register = 32'hAAAAAAAA;
    ip_time_setup = 32'hAAAAAAAA;
    master_read_in_rCache = 116'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    master_read_in_rRdPtr = 6'h2A;
    master_read_in_rWrPtr = 6'h2A;
    master_read_isRst_isInReset = 1'h0;
    master_read_out_1_rCache = 58'h2AAAAAAAAAAAAAA;
    master_read_out_1_rRdPtr = 6'h2A;
    master_read_out_1_rWrPtr = 6'h2A;
    master_write_in_addr_rCache = 116'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    master_write_in_addr_rRdPtr = 6'h2A;
    master_write_in_addr_rWrPtr = 6'h2A;
    master_write_in_data_rCache = 44'hAAAAAAAAAAA;
    master_write_in_data_rRdPtr = 6'h2A;
    master_write_in_data_rWrPtr = 6'h2A;
    master_write_isRst_isInReset = 1'h0;
    master_write_out_rCache = 25'h0AAAAAA;
    master_write_out_rRdPtr = 6'h2A;
    master_write_out_rWrPtr = 6'h2A;
    pci_start = 32'hAAAAAAAA;
    slave_read_isRst_isInReset = 1'h0;
    slave_write_addrIn_rv = 10'h2AA;
    slave_write_dataIn_rv = 37'h0AAAAAAAAA;
    slave_write_isRst_isInReset = 1'h0;
    wnext = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge aclk)
  begin
    #0;
    if (aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeRequest)
	$display("IP: ip_data_get_start: %d", ip_data_get_start);
    if (aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeRequest) $display("");
    if (aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeRequest) $display("IP: pci_start: %d", pci_start);
    if (aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeRequest) $display("");
    if (aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeRequest)
	$display("IP: ip_test_register %d", ip_test_register);
    if (aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeRequest) $display("");
    if (aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handleWriteRequest &&
	  slave_write_in$D_OUT[44:39] == 6'd16)
	$display("IP: get ddr size: %d", slave_write_in$D_OUT[38:7]);
    if (aresetn != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_handleWriteRequest &&
	  slave_write_in$D_OUT[44:39] == 6'd16)
	$display("");
  end
  // synopsys translate_on
endmodule  // mkASICBuffer

